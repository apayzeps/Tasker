<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_153465_discovert.OrganizationalScripts</api_name>
        <client_callable>false</client_callable>
        <description>Taking a User, find the default OU for the user.  This is used anywhere the system is trying to set the default OU.  Putting it in a script include will make a switch from finding the highest OU for a member to finding the "Default OU" for a member if we choose to make that switch.</description>
        <name>OrganizationalScripts</name>
        <script><![CDATA[var OrganizationalScripts = Class.create();
OrganizationalScripts.prototype = {
	initialize: function() {
	},
	
	GetUserDefaultOU: function(strUserId)
	{
		var officeMembersQuery = new GlideRecord('x_153465_discovert_discover_office_members');
		officeMembersQuery.addQuery('office_member',strUserId);
		var grOU = officeMembersQuery.addJoinQuery('x_153465_discovert_discover_office_hierarchy');
		var retOffice;
		
		// TODO:  review this note and make choices, probably checking a single row is best
		// NOTE:  we may need to have a member set thier default OU instead of doing this where the Default OU would be the first OU the member is added to
		// NOTE: also, may need to make office to members a many to many relationship, can look into that later...
		// If we don't make many to many, would need to have a checkbox on the member table thas says if this row is the default office for the member
		// when checked, on insert or update, we would have to update all other rows for this member to false
		
		// order the OUs in ascending order b/c the level of the highest OU will be the lowest level.
		officeMembersQuery.orderBy('office_level');
		officeMembersQuery.query();
		// based on the join, moving to the first record should be the highest office the current user i a member of
		if(officeMembersQuery.next()){
			retOffice = officeMembersQuery.discover_office_hierarchy.toString();
		}
		return retOffice;
	},
	
	GetUserDefaultTaskingAuthority: function(strOU)
	{
		var retTaskingAuthority;
		
		// look up this OU in the Tasking Authority list...
		// If it exists, default the Tasking Authority to this OU, if not, return blank
		var TaskingAuthorityQuery = new GlideRecord('x_153465_discovert_tasking_authority');
		TaskingAuthorityQuery.addQuery('organizational_unit',strOU);
		TaskingAuthorityQuery.query();
		if(TaskingAuthorityQuery.next()){
			retTaskingAuthority = TaskingAuthorityQuery.sys_id;
		}
		return retTaskingAuthority;
	},

	// RAJ 2018-07-19 - STRY0012696 - added this to remove the getReference calls
	getTaskingAuthorityOrganizationalUnit: function(strTaskingAuthority)
	{
		var retTaskingAuthority;
		
		// look up this OU in the Tasking Authority list...
		// If it exists, default the Tasking Authority to this OU, if not, return blank
		var TaskingAuthorityQuery = new GlideRecord('x_153465_discovert_tasking_authority');
		TaskingAuthorityQuery.get(strTaskingAuthority);
		if(TaskingAuthorityQuery){
			retTaskingAuthority = TaskingAuthorityQuery.organizational_unit;
		}
		return retTaskingAuthority;
	},

	// RAJ 2018-07-19 - STRY0012696 - added this to remove the getReference calls
	getOrganizationalUnitAbbrAndName: function(strOU)
	{
		var retAbbrAndName;
		
		// look up this OU in the Tasking Authority list...
		// If it exists, default the Tasking Authority to this OU, if not, return blank
		var grOU = new GlideRecord('x_153465_discovert_discover_office_hierarchy');
		grOU.get(strOU);
		if(grOU){
			retAbbrAndName = grOU.office_abbreviation + '9999_9999' + grOU.office_name;
		}
		return retAbbrAndName;
	},
	
	type: 'OrganizationalScripts'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2018-01-30 07:11:25</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>0c1eb2d44fc01300303dc3818110c72d</sys_id>
        <sys_mod_count>20</sys_mod_count>
        <sys_name>OrganizationalScripts</sys_name>
        <sys_package display_value="Tasker" source="x_153465_discovert">c6b1162d4fc10300303dc3818110c7b1</sys_package>
        <sys_policy>protected</sys_policy>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Tasker">c6b1162d4fc10300303dc3818110c7b1</sys_scope>
        <sys_update_name>sys_script_include_0c1eb2d44fc01300303dc3818110c72d</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2018-07-19 15:28:26</sys_updated_on>
    </sys_script_include>
</record_update>
