<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>custom</category>
        <client_script><![CDATA[function($scope, $rootScope, spUtil) {  
//------------------------------------------------------------------------------------------------------------------------
// WIDGET BASE: FIELDS
// COMPANY: DISCOVER TECHNOLOGIES
// CUSTOMIZED BY: KARINA TORRES
//------------------------------------------------------------------------------------------------------------------------
	
	/* widget controller */  var c = this;
	spUtil.recordWatch($scope, c.data.table, c.data.filter);				 
	var onListClick = $scope.$on('$sp.list.click', refreshWidget);
	var onSaveUpdate = $scope.$on('sp.form.record.updated', refreshWidget);
		
	function refreshWidget(evt,arg) {
		$scope.server.update();
	}
}]]></client_script>
        <controller_as>c</controller_as>
        <css>.taskertype{
    display:inline-block;
    border-bottom:2px solid #004475;
    padding-bottom:3px;
  	float: right;
  	font-size: 12px;
 		padding-top: 6px;
}

.btn {
    margin-bottom: 5px;
}
.btn-arrow-right,
.btn-arrow-left {
    position: relative;
    //padding-left: 18px;
    //padding-right: 18px;
}
.btn-arrow-right {
 		padding-left: 19px;
}
.btn-arrow-left {
    padding-right: 19px;
}
.btn-arrow-right:before,
.btn-arrow-right:after,
.btn-arrow-left:before,
.btn-arrow-left:after { /* make two squares (before and after), looking similar to the button */
    content:"";
    position: absolute;
    top: 5px; /* move it down because of rounded corners */
    width: 20px; /* same as height */
    height: 22px; /* button_outer_height / sqrt(2) */
    background: inherit; /* use parent background */
    border: inherit; /* use parent border */
    border-left-color: transparent; /* hide left border */
    border-bottom-color: transparent; /* hide bottom border */
    border-radius: 0px 4px 0px 0px; /* round arrow corner, the shorthand property doesn't accept "inherit" so it is set to 4px */
    -webkit-border-radius: 0px 4px 0px 0px;
    -moz-border-radius: 0px 4px 0px 0px;
}
.btn-arrow-right:before,
.btn-arrow-right:after {
    transform: rotate(45deg); /* rotate right arrow squares 45 deg to point right */
    -webkit-transform: rotate(45deg);
    -moz-transform: rotate(45deg);
    -o-transform: rotate(45deg);
    -ms-transform: rotate(45deg);
}
.btn-arrow-left:before,
.btn-arrow-left:after {
    transform: rotate(225deg); /* rotate left arrow squares 225 deg to point left */
    -webkit-transform: rotate(225deg);
    -moz-transform: rotate(225deg);
    -o-transform: rotate(225deg);
    -ms-transform: rotate(225deg);
}
.btn-arrow-right:before,
.btn-arrow-left:before { /* align the "before" square to the left */
    left: -11px;
}
.btn-arrow-right:after,
.btn-arrow-left:after { /* align the "after" square to the right */
    right: -11px;
}
.btn-arrow-right:after,
.btn-arrow-left:before { /* bring arrow pointers to front */
    z-index: 1;
}
.btn-arrow-right:before,
.btn-arrow-left:after { /* hide arrow tails background */
    background-color: transparent;
   	//background-color: white; //OOTB
}


//------------------------------------------------------------------------------------------------------------------------
// BY STATE
//------------------------------------------------------------------------------------------------------------------------
.btn {
	//color: white;
}

//Default
.btn.btn-default {
	background-color: #dddddd!important;
}


//New
.btn.btn-Draft,
.btn.btn-New {
	background-color: #898E8C!important;
  color: white;
}


//State = Unassigned
.btn.btn-Unassigned {
	background-color: #F6C716!important;
  color: white;
}

//State = Assigned
.btn.btn-Assigned {
	background-color: #4D8FAC;//#00BCD4;//#808080!important;
  color: white;
}

//State = Accepted
.btn.btn-Accepted {
	background-color: #A0D468!important;
  color: white;
}


//State = Rejected
.btn.btn-Rejected {
	background-color: #FF6B61!important;
}

//State = Work in Progress
.btn.btn-Submitted,
.btn.btn-Work.in.Progress {
	background-color: #2E3C54!important;
  color: white;
}

//State = In Review
.btn.btn-Promoted, 
.btn.btn-In.Review {
	background-color: #9A59B5!important;
  color: white;
}

//State = Rework
.btn.btn-Returned,
.btn.btn-Rework {
	background-color: #2E3C54!important;
  color: white;
}

//State = Close Complete
.btn.btn-Completed {
	background-color: #37C1C3!important;
  color: white;
}

//State = Close Incomplete
.btn.btn-Incomplete {
	background-color: #37C1C3!important;
  color: white;
}

//State = Close Skipped
.btn.btn-Cancelled {
	background-color: #37C1C3!important;
  color: white;
}


.btn.btn-highlighted {
  	border-width: 1px!important;
  	border-color: Red!important;
}
</css>
        <data_table>sp_instance</data_table>
        <demo_data/>
        <description/>
        <docs/>
        <field_list/>
        <has_preview>false</has_preview>
        <id>discovertasker-ticket-process-flow</id>
        <internal>false</internal>
        <link/>
        <name>Tasker Ticket Process Flow</name>
        <option_schema/>
        <public>false</public>
        <roles>x_153465_discovert.tasker_user</roles>
        <script><![CDATA[//------------------------------------------------------------------------------------------------------------------------
// WIDGET BASE: ?
// COMPANY: DISCOVER TECHNOLOGIES
// CUSTOMIZED BY: KARINA TORRES
//------------------------------------------------------------------------------------------------------------------------
(function(data) {
	var gr = $sp.getRecord();
	if (gr != null) {
		data.canRead = gr.canRead();
		if (!data.canRead) 
			return;
 } else return null;
	
	data.id = gr.getUniqueValue();
	data.table = gr.getTableName();
	data.filter = 'sys_id='+data.id;
	
	if (data.table == "x_153465_discovert_route_task_instance") {
		data.tasker_type = gr.tasker_type.getDisplayValue().toString();
		data.flow = createProcessFlow(data.table, data.id, data.tasker_type);
	}
	
	// Check the process flow
	function createProcessFlow(table, id, tasker_type) {
		//var table = gr.getTableName();
		//var id = gr.getUniqueValue();
		
		var gf = new GlideRecord('sys_process_flow'); //Note: GlideRecordSecure is not feasible to use on this widget that is reading values from a table enable by the process flow plugin
		gf.addActiveQuery();
		gf.addQuery('table', table);
		if (id != "-1") { if (tasker_type.length > 0 && tasker_type != "Standard") {encoded_query = "name!=Work in Progress"; gf.addEncodedQuery(encoded_query);}}
		gf.orderBy('order');
		gf.query();

		var currentStep;
		var items = [];
		while (gf.next()) {
			var item = {};
			item.name = gf.label.toString();
			item.colour = getCurrentStep(gf.condition.toString(), table, id); //OOTB
			//item.colour = gf.label.toString();
			items.push(item);
			
		}	
		if (gr.getTableName() == "x_153465_discovert_route_task_instance")
			currentStep =  gr.state.getDisplayValue().toString();//*
		if (gr.getTableName() == "x_153465_discovert_war_sar_reporting")
			currentStep =  gr.status.getDisplayValue().toString();
		
		items = retoActiveSuccess(items, currentStep);
		return items;
	}

	
	// Check the process flow query against the current job to see if the conditions match
	function getCurrentStep(step, table, id) {
		var gnr = new GlideRecordSecure(table);
		gnr.addEncodedQuery(step);
		gnr.addQuery('sys_id', id);
		gnr.query();

		if (gnr.next()) {
			//return 'warning';
			//return gr.state.getDisplayValue().toString();//highlighted'; //*
			var currentStep;
			if (gr.getTableName() == "x_153465_discovert_route_task_instance")
				currentStep =  gr.state.getDisplayValue().toString();//*
			if (gr.getTableName() == "x_153465_discovert_war_sar_reporting")
				currentStep =  gr.status.getDisplayValue().toString();
			
			return currentStep;
			
		} else {
			//return 'primary';
			return 'default';
		}
		
	}
	
	// Set the previous steps in the flow to success if the current step is further down the order
	function retoActiveSuccess(items, currentStep) {
		var i = 0;
		for (var key in items) {
			var value = items[key];

			if (value.colour == currentStep) { 
			//if (value.colour == 'warning') { //OOTB
				var index = i;
				for (var j = 0; j<i; j++) {
					//items[j].colour = 'success'; //OOTB
					items[j].colour = items[j].name;
				}			
				if (index == items.length) {
					value.colour = 'sucess';
				}
				break;
			}
			i++;
		}
		return items;
	}


	

})(data);

//------------------------------------------------------------------------------------------------------------------------
// WIDGET BASE: FIELDS
// COMPANY: DISCOVER TECHNOLOGIES
// CUSTOMIZED BY: KARINA TORRES
//------------------------------------------------------------------------------------------------------------------------

/*
(function() {
	var gr = $sp.getRecord();
	if (gr != null) {
		data.canRead = gr.canRead();
		if (!data.canRead) 
			return;
 } else return null;
	
	// Check the process flow query against the current job to see if the conditions match
	function getCurrentStep(step, table, id) {
		var gnr = new GlideRecord(table);
		gnr.addEncodedQuery(step);
		gnr.addQuery('sys_id', id);
		gnr.query();

		if (gnr.next()) {
			return 'warning';
		} else {
			return 'primary';
		}
	}
	
	// Set the previous steps in the flow to success if the current step is further down the order
	function retoActiveSuccess(items) {
		var i = 0;
		for (var key in items) {
			var value = items[key];
			if (value.colour == 'warning') {
				var index = i;
				for (var j = 0; j<i; j++) {
					items[j].colour = 'success';
				}			
				if (index == items.length) {
					value.colour = 'sucess';
				}
				break;
			}
			i++;
		}
		return items;
	}

	function createProcessFlow() {
		var table = gr.getTableName();
		var id = gr.getUniqueValue();

		var gf = new GlideRecord('sys_process_flow');
		gf.addActiveQuery();
		gf.addQuery('table', table);
		gf.orderBy('order');
		gf.query();

		var items = [];
		while (gf.next()) {
			var item = {};
			item.name = gf.label.toString();
			item.colour = getCurrentStep(gf.condition.toString(), table, id);
			items.push(item);
		}	

		items = retoActiveSuccess(items);
		return items;
	}

	data.flow = createProcessFlow();

})();
*/]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>bkeener</sys_created_by>
        <sys_created_on>2018-02-08 21:07:21</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>75b794674fcc9700303dc3818110c706</sys_id>
        <sys_mod_count>214</sys_mod_count>
        <sys_name>Tasker Ticket Process Flow</sys_name>
        <sys_package display_value="Tasker" source="x_153465_discovert">c6b1162d4fc10300303dc3818110c7b1</sys_package>
        <sys_policy>protected</sys_policy>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Tasker">c6b1162d4fc10300303dc3818110c7b1</sys_scope>
        <sys_update_name>sp_widget_75b794674fcc9700303dc3818110c706</sys_update_name>
        <sys_updated_by>KTorres</sys_updated_by>
        <sys_updated_on>2019-03-20 19:02:29</sys_updated_on>
        <template><![CDATA[<div>
  <!-- your widget template -->
  <div class="visible-md visible-lg" ng-if="data.flow.length > 0">
    <div>
    	<button ng-repeat="key in data.flow" type="button" class="btn btn-{{key.colour}} btn-arrow-right" title="States for Tasker Type: {{data.tasker_type}}">{{key.name}}</button>
      <!--<span class="label label-info pull-right">{{data.tasker_type}}</span>-->
      <span class="taskertype" title="Tasker Type">{{data.tasker_type}}</span>
    </div>
   </div>
</div>]]></template>
    </sp_widget>
</record_update>
