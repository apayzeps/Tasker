<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_153465_discovert.TaskerAttachmentFunctions</api_name>
        <client_callable>false</client_callable>
        <description>This contains functions to copy records and to copy attachments.</description>
        <name>TaskerAttachmentFunctions</name>
        <script><![CDATA[var TaskerAttachmentFunctions = Class.create();
TaskerAttachmentFunctions.prototype = {
	initialize: function() {
	},
	
	copySingleAttachment: function(donorTable, donorID, recipientTable, recipientID, fileName, attach_sys_id)
	{
		var gsisAttachment;  // GlideScriptableInputStram returned from getContentStream
		var recipientRec;
		var donorAttSysID;
		var donorAttContentType;
		var newAttSysId;
		
		var attRecord = new GlideRecord('sys_attachment');
		if(attach_sys_id + '' != ''){
			attRecord.addQuery('sys_id', attach_sys_id);
		}
		else {
			attRecord.addQuery('table_name', donorTable);
			attRecord.addQuery('table_sys_id', donorID);
			attRecord.addQuery('file_name', fileName);
		}
		
		attRecord.query();
		if (attRecord.next()) {
			donorAttSysID = attRecord.getValue('sys_id');
			gs.info('Discover Tasker - Single Attachment adding, found attachment Added - donorAttSysID:' + donorAttSysID);
			donorAttContentType = attRecord.getValue('content_type');
			gs.info('Discover Tasker - Single Attachment adding, found attachment Added - donorAttContentType:' + donorAttContentType);
			// get the attachment into a content stream
			gsisAttachment = new GlideSysAttachment().getContentStream(donorAttSysID);
			gs.info('Discover Tasker - Single Attachment adding, pulled content stream');
			// get a reference to the record for the recipient table
			recipientRec = new GlideRecord(recipientTable);
			recipientRec.get(recipientID);
			gs.info('Discover Tasker - Single Attachment adding, retrieve Recipient Record - RecipientID:' + recipientID);
			
			// write the content stream pulled based on the provided Attachment sys_id into the new table
			newAttSysId = new GlideSysAttachment().writeContentStream(recipientRec, fileName, donorAttContentType, gsisAttachment);
			gs.info('Discover Tasker - Single Attachment Added - sys_id:' + newAttSysId);
			return newAttSysId;
		}
	},
	
	//copySpecificAttachment(donorTable, donorID, recipientTable, recipientID, fileName);
	copySpecificAttachment: function(donorTable, donorID, recipientTable, recipientID, fileName, attach_sys_id)
	{
		gs.info('TaskerAttachmentFunctions - copySpecificAttachment - donorTable: ' + donorTable);
		gs.info('TaskerAttachmentFunctions - copySpecificAttachment - donorID: ' + donorID);
		gs.info('TaskerAttachmentFunctions - copySpecificAttachment - recipientTable: ' + recipientTable);
		gs.info('TaskerAttachmentFunctions - copySpecificAttachment - recipientID: ' + recipientID);
		gs.info('TaskerAttachmentFunctions - copySpecificAttachment - fileName: ' + fileName);
		gs.info('TaskerAttachmentFunctions - copySpecificAttachment - attach_sys_id: ' + attach_sys_id);
		
		// set up variables
		var donorAttSysID;
		var newAttRecord;
		var linkToNewRecord;
		var attDataRecord;
		var newDocRecord;
		// Get a GlideRecord with the actual sys_attachment record we're looking to copy.
		var attRecord = new GlideRecord('sys_attachment');
		if(attach_sys_id + '' != ''){
			attRecord.addQuery('sys_id', attach_sys_id);
		}
		else {
			attRecord.addQuery('table_name', donorTable);
			attRecord.addQuery('table_sys_id', donorID);
			attRecord.addQuery('file_name', fileName);
		}
		
		attRecord.query();
		gs.info('TaskerAttachmentFunctions - copySpecificAttachment - finding attachment');
		// if a filename is passed in and the same file appears more than once, the while loop could run more than once.
		// the return value will return the last file copied, which MAY not be the desired outcome.
		while (attRecord.next()) {
			gs.info('TaskerAttachmentFunctions - copySpecificAttachment - attachment found');
			donorAttSysID = attRecord.getValue('sys_id');
			// Copy sys_attachment record, using, the sys_attachment record essentially just contains metadata about the attachment.
			// The actual bytes contained within the file, are stored in the sys_attachment_doc table!
			newAttRecord = this.copyRecord(attRecord);
			gs.info('TaskerAttachmentFunctions - copySpecificAttachment - attachment copied');
			// the copyRecord function returns the GlideRecord object for the newly created record
			// now modify the table_name and table_sys_id fields.
			// This creates an exact copy of the record we passed into the function, except for the two changes made below.
			/// These 2 changes associate the new sys_attachment record to our "recipient" record.
			newAttRecord.setValue('table_name', recipientTable);
			newAttRecord.setValue('table_sys_id', recipientID);
			newAttRecord.update();
			gs.info('TaskerAttachmentFunctions - copySpecificAttachment - attachment record updated to parent');
			linkToNewRecord = gs.getProperty('glide.servlet.uri') + newAttRecord.getLink();
			// Create a new GlideRecord for the sys_attachment_doc table
			// this is where the data for the attachments is actually stored, so these entries need to be copied too
			attDataRecord = new GlideRecord('sys_attachment_doc');
			// Query to get all of the sys_attachment_doc records related to our specific sys_attachment record
			attDataRecord.addQuery('sys_attachment', donorAttSysID);
			attDataRecord.query();
			while (attDataRecord.next()) {
				gs.info('TaskerAttachmentFunctions - copySpecificAttachment - copying file chunks');
				// pass each sys_attachment_doc record for the attachment into the copyRecord function.
				newDocRecord = this.copyRecord(attDataRecord);
				gs.info('TaskerAttachmentFunctions - copySpecificAttachment - file chunk copied');
				// Modify the returned GlideRecord containing the new sys_attach_doc records to point at the new sys_id.
				newDocRecord.setValue('sys_attachment', newAttRecord.getValue('sys_id'));
				gs.info('TaskerAttachmentFunctions - copySpecificAttachment - file chunks sys_id set');
				// and then .update()
				newDocRecord.update();
				gs.info('TaskerAttachmentFunctions - copySpecificAttachment - file chunks go next');
			}
		}
		//gs.print(linkToNewRecord);
		// added to return the new attachment to the caller.
		return newAttRecord;
	},
	
	// copyRecord function.
	// This super nifty function grabs all the fields on a given record, and makes a duplicate
	// it copyies over the values of every field (except sys_id, and number).
	copyRecord: function(record)
	{
		gs.info('TaskerAttachmentFunctions - copyRecord - copying record fields');
		var recordElement;
		var recordElementName;
		var recordTable = record.getTableName();
		//		var recordFields = record.getFields();
		
		var newRecord = new GlideRecord(recordTable);
		newRecord.initialize();
		
		var elements = record.getElements();
		var i;
		var element;
		if (typeof elements.size != 'undefined') {
			//we are in global scope, so iterate
			for (i=0; i<elements.size(); i++) {
				element = elements.get(i);
				if(element.getName() != 'sys_id' && element.getName() != 'number' && element.getName() != 'sys_mod_count' && element.getName() != 'sys_tags')
					{
					recordElementName = element.getName();
					newRecord.setValue(recordElementName, record.getValue(recordElementName));
				}
			}
		} else {
			//we are in scope, so loop over the array
			for (i=0; i<elements.length; i++) {
				element = elements[i];
				if(element.getName() != 'sys_id' && element.getName() != 'number' && element.getName() != 'sys_mod_count' && element.getName() != 'sys_tags')
					{
					recordElementName = element.getName();
					newRecord.setValue(recordElementName, record.getValue(recordElementName));
				}
			}
		}
		
		// 		for (var i = 0; i < recordFields.size(); i++) {
			// 			recordElement = recordFields.get(i);
			// 			if(recordElement.getName() != 'sys_id' && recordElement.getName() != 'number')
			// 				{
				// 				recordElementName = recordElement.getName();
				// 				newRecord.setValue(recordElementName, record.getValue(recordElementName));
				// 			}
				// 		}
				// gs.info('TaskerAttachmentFunctions - copyRecord - fields all set on new record');
				var newSysId = newRecord.insert();
				gs.info('TaskerAttachmentFunctions - copyRecord - new record created');
				return newRecord;
			},
			
			type: 'TaskerAttachmentFunctions'
		};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>rjoy</sys_created_by>
        <sys_created_on>2018-04-03 15:57:52</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>e94395bcdb9d13403a8d6be3ca961933</sys_id>
        <sys_mod_count>20</sys_mod_count>
        <sys_name>TaskerAttachmentFunctions</sys_name>
        <sys_package display_value="Tasker" source="x_153465_discovert">c6b1162d4fc10300303dc3818110c7b1</sys_package>
        <sys_policy>protected</sys_policy>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Tasker">c6b1162d4fc10300303dc3818110c7b1</sys_scope>
        <sys_update_name>sys_script_include_e94395bcdb9d13403a8d6be3ca961933</sys_update_name>
        <sys_updated_by>rjoy</sys_updated_by>
        <sys_updated_on>2018-04-17 21:41:32</sys_updated_on>
    </sys_script_include>
</record_update>
