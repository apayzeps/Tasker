<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_153465_discovert.ClientOrganizationalScripts</api_name>
        <client_callable>true</client_callable>
        <description>This is the "client callable" version of the OrganizationalScripts script include.&#13;
&#13;
Taking a User, find the default OU for the user.  This is used anywhere the system is trying to set the default OU.  Putting it in a script include will make a switch from finding the highest OU for a member to finding the "Default OU" for a member if we choose to make that switch.</description>
        <name>ClientOrganizationalScripts</name>
        <script><![CDATA[var ClientOrganizationalScripts = Class.create();
ClientOrganizationalScripts.prototype = Object.extendsObject(global.AbstractAjaxProcessor, {
	
	GetUserDefaultOU: function()
	{
		//Query organizational unit members to see if the user is a member
		var userID = this.getParameter('UserId');

		var orgScripts = new OrganizationalScripts();
		return orgScripts.GetUserDefaultOU(userID);
	},
	
	
	GetUserDefaultTaskingAuthority: function()
	{
		//Query organizational unit members to see if the user is a member
		var strOU = this.getParameter('OU');
		
		var orgScripts = new OrganizationalScripts();
		return orgScripts.GetUserDefaultTaskingAuthority(strOU);
	},
	
	// RAJ 2018-07-19 - STRY0012696 - added this to remove the getReference calls
	getTaskingAuthorityOrganizationalUnit: function()
	{
		//Query organizational unit members to see if the user is a member
		var strTaskingAuthority = this.getParameter('sysParam_TaskingAuthority');
		
		var orgScripts = new OrganizationalScripts();
		return orgScripts.getTaskingAuthorityOrganizationalUnit(strTaskingAuthority);
	},

	// RAJ 2018-07-19 - STRY0012696 - added this to remove the getReference calls
	getOrganizationalUnitAbbrAndName: function()
	{
		//Query organizational unit members to see if the user is a member
		var strOU = this.getParameter('sysParam_OU');
		
		var orgScripts = new OrganizationalScripts();
		return orgScripts.getOrganizationalUnitAbbrAndName(strOU);
	},
	
	type: 'ClientOrganizationalScripts'
});]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2018-07-18 15:27:09</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>4c9bfebadb5f5f40bb8ee536ca9619ec</sys_id>
        <sys_mod_count>11</sys_mod_count>
        <sys_name>ClientOrganizationalScripts</sys_name>
        <sys_package display_value="Tasker" source="x_153465_discovert">c6b1162d4fc10300303dc3818110c7b1</sys_package>
        <sys_policy>protected</sys_policy>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Tasker">c6b1162d4fc10300303dc3818110c7b1</sys_scope>
        <sys_update_name>sys_script_include_4c9bfebadb5f5f40bb8ee536ca9619ec</sys_update_name>
        <sys_updated_by>kbaton</sys_updated_by>
        <sys_updated_on>2019-02-19 17:20:28</sys_updated_on>
    </sys_script_include>
</record_update>
