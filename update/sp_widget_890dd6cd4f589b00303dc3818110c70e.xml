<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>custom</category>
        <client_script><![CDATA[function clientController($scope, $rootScope, $http, $location, spUtil, $interpolate, $log, spAriaUtil) {
//------------------------------------------------------------------------------------------------------------------------
// COMPANY: DISCOVER TECHNOLOGIES
// CUSTOMIZED BY: KARINA TORRES
// RECURSIVE LIST TREE
//------------------------------------------------------------------------------------------------------------------------
	var c = this;
	var onListClick = $scope.$on('$sp.list.click', refreshWidget);
	var onSaveUpdate = $scope.$on('sp.form.record.updated', refreshWidget);
	
	// refresh the widget after a refrence record has been updated	
	function refreshWidget(evt,arg) {
		c.server.update();
		$('#task-tree').treeview('remove');
		// recreate the list after a record has been updated; wait 2 seconds for server delays
		setTimeout(function(){
					createListTree();
		}, 2000);

	}
	createListTree();
	
	// crate the list tree on page load
	function createListTree(){
		 $('#task-tree').treeview({
        data: c.data.tasks,
        levels: 10,
        showBorder: false,
        enableLinks: true,
        //expandIcon: "fa fa-plus-square-o",
				expandIcon: "glyphicon glyphicon-chevron-down",
        //collapseIcon: "fa fa-minus-square-o",
				collapseIcon: "	glyphicon glyphicon-chevron-right",
        //selectedIcon: "fa fa-chevron-right",
        selectedBackColor: "#50a3ea"
  }); 
	
	//expands all of tree nodes
	$('#task-tree').treeview('expandAll');
	
	$scope.$on('$sp.list.click', function(event,data){  
		$location.url('?id=' + c.data.page + '&sys_id=' + data.sys_id + '&table='+ data.table);
    $scope.$apply();
			
	});
	}

}
	]]></client_script>
        <controller_as>c</controller_as>
        <css>//------------------------------------------------------------------------------------------------------------------------
// COMPANY: DISCOVER TECHNOLOGIES
// CUSTOMIZED BY: KARINA TORRES
// RECURSIVE LIST TREE
//------------------------------------------------------------------------------------------------------------------------

div.panel-heading {
  font-size: 16px;
  font-family: "SourceSansPro", Helvetica, Arial, sans-serif;
}

span.indent {
  margin-left: 0px!important;
}

.node-task-tree {
  border-top-right-radius: 0px !important;
  border-top-left-radius: 0px !important;
  border-bottom-right-radius: 0px !important;
  border-bottom-left-radius: 0px !important;
}

.list-group-item {
	padding-right: 10px!important;
  padding-bottom: 20px!important;
}

ul.list-group {
  //margin: 1em 10px 1em 20px;
  //padding: 0px;   
  //white-space: nowrap;
  
  overflow-x: hidden;
  list-style-type: none;
  margin: auto;
}

li {
	padding: 10px 10px 10px 0px;
  margin: 0px 0px 0px 0px; 
  border-bottom: 1px dashed #BDBDBD; 
  display: list-item;
}


li.list-group-item.node-task-tree {
	background-color: #F5F5F5!important;
  font-size: 16px important;
  text-decoration: none;
  font-family: "SourceSansPro", Helvetica, Arial, sans-serif;
  //Segoe UI;
  margin-right 15px;
	list-style: none;
	color: #3a3f51!important;
  padding: 10px 15px;
}


li.list-group-item.node-task-tree.node-selected {
  background-color: #FFF!important;
  //background-color: #EEEEEE!important; //#808080!important; //#2E3C54 !important;
  //border-color: #F6C716!important;
  color: rgb(58, 63, 81)!important;// #fff !important; //rgb(58, 63, 81) !important;
  border-bottom: 1px!important;
  border-right: 5px solid #ADD8E6;
  font-weight: 600;
}

//------------------------------------------------------------------------------------------------------------------------
// BY STATE
//------------------------------------------------------------------------------------------------------------------------

//State = Unassigned
span.label.label-Unassigned,
span.label.label-pill.label-Unassigned {
	background-color: #F6C716!important;
}

//State = Assigned
span.label.label-Assigned,
span.label.label-pill.label-Assigned {
	background-color: #4D8FAC;//#808080!important;  
}

//State = Accepted
span.label.label-Accepted,
span.label.label-pill.label-Accepted {
	background-color: #A0D468!important;
}

//State = Rejected
span.label.label-Rejected,
span.label.label-pill.label-Rejected {
	background-color: #FF6B61!important;
}

//State = Work in Progress
span.label.label-Work.in.Progress,
span.label.label-pill.label-Work.in.Progress {
	background-color: #2E3C54!important;
}

//State = Work in Scheduled
span.label.label-Work.Scheduled,
span.label.label-pill.label-Work.Scheduled {
	background-color: #2E3C54!important;
}

//State = In Review
span.label.label-In.Review,
span.label.label-pill.label-In.Review {
	background-color: #9A59B5!important;
}

//State = Rework
span.label.label-Rework,
span.label.label-pill.label-Rework {
	background-color: #2E3C54!important;
}

//State = Close Complete
span.label.label-Completed,
span.label.label-pill.label-Completed {
	background-color: #37C1C3!important;
}

//State = Close Incomplete
span.label.label-Closed.Incomplete,
span.label.label-pill.label-Closed.Incomplete {
	background-color: #37C1C3!important;
}

//State = Close Skipped
span.label.label-Cancelled ,
span.label.label-pill.label-Cancelled {
	background-color: #37C1C3!important;
}


//------------------------------------------------------------------------------------------------------------------------
// BY STATUS
//------------------------------------------------------------------------------------------------------------------------

//Status = empty
a[href*='table=x_153465_discovert_route_task_instance&amp;view=sp&amp;status=']{
	border-right-style: solid;
	border-right-color: Grey!important;
	border-right-width: 3px;
  padding: 5px;
}

//Status = On Time
a[href*='table=x_153465_discovert_route_task_instance&amp;view=sp&amp;status=Projected on time']{
	border-right-style: solid;
	border-right-color: #37C1C3!important;
	border-right-width: 3px;
  padding: 5px;
}

//Status = Upcoming
a[href*='table=x_153465_discovert_route_task_instance&amp;view=sp&amp;status=Upcoming'],
a[href*='table=x_153465_discovert_route_task_instance&amp;view=sp&amp;status=Warning']{
	border-right-style: solid;
	border-right-color: #F8D347!important;
	border-right-width: 3px;
  padding: 5px;
}

//Status = Overdue
a[href*='table=x_153465_discovert_route_task_instance&amp;view=sp&amp;status=Critical']{
	border-right-style: solid;
	border-right-color: #FF6B61!important;
	border-right-width: 3px;
  padding: 5px;
}


//State = Unassigned
/*
a[href*='table=x_153465_discovert_route_task_instance&amp;view=sp&amp;state=-5']{
	border-right-style: solid;
	border-right-color: #AAB2BD!important;
	border-right-width: 3px;
  padding: 5px;
}
*/

//State = Assigned
/*
a[href*='table=x_153465_discovert_route_task_instance&amp;view=sp&amp;state=1']{
	border-right-style: solid;
	border-right-color: #808080!important;
	border-right-width: 3px;
  padding: 5px;
}
*/

//State = Accepted
/*
a[href*='table=x_153465_discovert_route_task_instance&amp;view=sp&amp;state=10']{
	border-right-style: solid;
	border-right-color: #A0D468!important;
	border-right-width: 3px;
  padding: 5px;
}
*/

//State = Rejected
/*
a[href*='table=x_153465_discovert_route_task_instance&amp;view=sp&amp;state=11']{
	border-right-style: solid;
	border-right-color: #FF6B61!important;
	border-right-width: 3px;
  padding: 5px;
}
*/

//State = Work Scheduled
/*
a[href*='table=x_153465_discovert_route_task_instance&amp;view=sp&amp;state=12']{
	border-right-style: solid;
	border-right-color: #37C1C3!important;
	border-right-width: 3px;
  padding: 5px;
}
*/

//State = Work in Progress
/*
a[href*='table=x_153465_discovert_route_task_instance&amp;view=sp&amp;state=13']{
	border-right-style: solid;
	border-right-color: #2E3C54!important;
	border-right-width: 3px;
  padding: 5px;
}
*/

//State = In Review
/*
a[href*='table=x_153465_discovert_route_task_instance&amp;view=sp&amp;state=14']{
	border-right-style: solid;
	border-right-color: #9A59B5!important;
	border-right-width: 3px;
  padding: 5px;
}*/

//State = Rework
/*
a[href*='table=x_153465_discovert_route_task_instance&amp;view=sp&amp;state=15']{
	border-right-style: solid;
	border-right-color: #2E3C54!important;
	border-right-width: 3px;
  padding: 5px;
}
*/

//State = Close Complete
/*
a[href*='table=x_153465_discovert_route_task_instance&amp;view=sp&amp;state=3']{
	border-right-style: solid;
	border-right-color: #37C1C3!important;
	border-right-width: 3px;
  padding: 5px;
  opacity: 0.5;
}
*/

//State = Close Incomplete
/*
a[href*='table=x_153465_discovert_route_task_instance&amp;view=sp&amp;state=4']{
	border-right-style: solid;
	border-right-color: #37C1C3!important;
	border-right-width: 3px;
  padding: 5px;
  opacity: 0.5;
}
*/

//State = Close Skipped
/*
a[href*='table=x_153465_discovert_route_task_instance&amp;view=sp&amp;state=7']{
	border-right-style: solid;
	border-right-color: #37C1C3!important;
	border-right-width: 3px;
  padding: 5px;
  opacity: 0.5;
}
*/

//-------------------- Karina Torres ----------------------------
//------------------------------------------------------------------------------------------------------------------------
</css>
        <data_table>sp_instance</data_table>
        <demo_data>{"options" :
   {
      "hide_xs" : false
   }
}</demo_data>
        <description/>
        <docs/>
        <field_list>glyph,color</field_list>
        <has_preview>true</has_preview>
        <id>discovertasker-recursivetasktreelist</id>
        <internal>false</internal>
        <link/>
        <name>Tasker List Task Tree</name>
        <option_schema>[{"name":"title","label":"Title","type":"string"},{"displayValue":"Page","name":"page","label":"Page","type":"reference","value":"sp_page","ed":{"reference":"sp_page"}},{"name":"hide_xs","label":"Hide at XS","type":"boolean"}]</option_schema>
        <public>false</public>
        <roles>x_153465_discovert.tasker_user</roles>
        <script><![CDATA[//------------------------------------------------------------------------------------------------------------------------
// COMPANY: DISCOVER TECHNOLOGIES
// CUSTOMIZED BY: KARINA TORRES
// RECURSIVE TASK LIST TREE
//------------------------------------------------------------------------------------------------------------------------

//------------------------------------------------------------------------------------------------------------------------
// INITIALIZE VARIABLES
//------------------------------------------------------------------------------------------------------------------------
(function() {

	var sys_id_topparenttask = null;
	var sys_id_currenttask = null;
	
	if ($sp.getParameter("table") == 'x_153465_discovert_route_task_instance') {
		sys_id_currenttask = $sp.getParameter("sys_id");
		sys_id_topparenttask = $sp.getParameter("sys_id");
	} else return;

	if (!sys_id_currenttask) {
		data.id = null;
		return;
	}
	
	sys_id_topparenttask = getTopParent(sys_id_currenttask);
	
  data.table = $sp.getParameter("table");
	data.sc_catalog = $sp.getValue('x_153465_discovert_route_task_instance');
  data.tasks = getTasks(data.sc_catalog, sys_id_topparenttask, sys_id_currenttask);
  data.title = gs.getMessage(options.title);
	//data.page = "discovertasker_processdetails"; //before
	data.page = $sp.getParameter("id");
	
})();

//------------------------------------------------------------------------------------------------------------------------
// GET THE TOP PARENT FOR THE CURRENT SYS_ID
//------------------------------------------------------------------------------------------------------------------------
function getTopParent(sys_id_currenttask) {

	var hasParent;
	var parentID;
	
	var parentGR = new GlideRecordSecure('x_153465_discovert_route_task_instance');
	parentGR.addQuery('sys_id', sys_id_currenttask);
	parentGR.query();
	parentGR.next();
	
	if (parentGR.parent){
			hasParent = true;
			parentID = parentGR.getValue('parent');

			while(hasParent){
				var gp = new GlideRecordSecure('x_153465_discovert_route_task_instance');
				gp.addQuery('sys_id', parentID);
				gp.query();
				gp.next();

				if(gp.parent){
					parentID = gp.getValue('parent');
				}
				else{
					hasParent = false;
				}
			}
	}
	else{
		parentID = sys_id_currenttask;
	}
	
	return parentID;

}

//------------------------------------------------------------------------------------------------------------------------
// GET TOP PARENT INFORMATION
// Before: Get Routes. Catalog = Template Process
//------------------------------------------------------------------------------------------------------------------------
function getTasks(catalog,sys_id_topparenttask,sys_id_currenttask) { 

	var result = [];
    var parentGR = new GlideRecordSecure('x_153465_discovert_route_task_instance');
    parentGR.addQuery('sys_id',sys_id_topparenttask);
    parentGR.query();
	
    while (parentGR.next()) {
        if (!$sp.canReadRecord("x_153465_discovert_route_task_instance", parentGR.getUniqueValue())) {
            continue;
        }
					
        result.push(getTaskRecursive({
            sys_id: parentGR.getValue('sys_id'),
						text: getTaskTitle(parentGR.getValue('number'), parentGR.getValue('short_description'), parentGR.primary_assignee.getDisplayValue().toString(), parentGR.assigned_to.getDisplayValue().toString(), parentGR.state.getDisplayValue(), 0),
						state: getStateNode(sys_id_topparenttask, 'top'),
					  href: '?id=discovertasker_processdetails&sys_id=' + parentGR.getValue('sys_id')+'&table=x_153465_discovert_route_task_instance&view=sp'+'&state='+ parentGR.state+'&order='+ parentGR.order
        }));
    }
    return result;
}

//------------------------------------------------------------------------------------------------------------------------
// GET TASKS RECURSIVELY
//------------------------------------------------------------------------------------------------------------------------
function getTaskRecursive(task) { 

	var sc = new GlideRecordSecure('x_153465_discovert_route_task_instance');
		sc.addQuery('parent',task.sys_id);
		sc.orderBy('order');
    sc.orderBy('number');
    sc.query();

	while (sc.next()) {
			
	      if (!$sp.canReadRecord("x_153465_discovert_route_task_instance", sc.getUniqueValue())) {
            continue;
        }
        
        if (!task.nodes) {
            task.nodes = [];
        }
		
        task.nodes.push(getTaskRecursive({
            sys_id: sc.getValue('sys_id'),
            text: getTaskTitle(sc.getValue('number'), sc.getValue('short_description'), sc.primary_assignee.getDisplayValue().toString(), sc.assigned_to.getDisplayValue().toString(), sc.state.getDisplayValue(), sc.task_order),
					  parent: sc.getValue('parent'),
						state: getStateNode(sc.getValue('sys_id')),
						href: '?id=discovertasker_processdetails&sys_id=' + sc.getValue('sys_id')+'&table='+'x_153465_discovert_route_task_instance&view=sp'+'&state='+ sc.state	
        }));
    }
    return task;
}


//------------------------------------------------------------------------------------------------------------------------
// GET COLLAPSE/EXPAND
//------------------------------------------------------------------------------------------------------------------------
function getStateNode(taskSysId,type) {
    var currentSysId = $sp.getParameter("sys_id"); 
	  var parents = getAllParents(taskSysId);
		
		if (type == 'top' && taskSysId == currentSysId) {
        return {
            selected: true,
            expanded: true
        };
    }
		
		if (parents.indexOf(taskSysId) > -1 || type == 'top'){
				return {
            expanded: true
        };
    }

    if (taskSysId == currentSysId) {
        return {
            selected: true,
            expanded: true
        };
    }else {
			return {
            selected: false,
            expanded: false
        };
		}
    return {};
}

function getAllParents(taskSysId) {
  var result = [];
	var allParents = "";
	var parent;
	
  var sc = new GlideRecordSecure('x_153465_discovert_route_task_instance');
	sc.addQuery('sys_id',taskSysId);
	sc.orderBy('order');
  sc.orderBy('number');
  sc.query();

	while (sc.next()) {
		parent = sc.getValue('parent');
        if (parent) {
						allParents += " | " + parent.toString();
        }
	}
	return allParents;
}

//------------------------------------------------------------------------------------------------------------------------


//------------------------------------------------------------------------------------------------------------------------
// GET TASK TITLE
//------------------------------------------------------------------------------------------------------------------------
function getTaskTitle(TaskNumber, Short_Description, Primary_Assignee, Assigned_To, State, Order) {
	var taskTitle = null;
	taskTitle = "<span class='nav-label'>" + TaskNumber + ": " + Short_Description +".</span>";
	
	if (Order > 0)
		taskTitle = Order + ". "+ taskTitle; // NEW
	
	if (Primary_Assignee.length > 0) 
		taskTitle += " " + Primary_Assignee + " "
	
		if (Assigned_To.length > 0) 
		taskTitle += "(" + Assigned_To + ") "

  var badgeclass = "label label-"+State;
	taskTitle +="<span class='"+badgeclass+" pull-right'>"+ State +"</span>";
	
	return taskTitle;
}


]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>kTorres</sys_created_by>
        <sys_created_on>2018-02-13 22:40:38</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>890dd6cd4f589b00303dc3818110c70e</sys_id>
        <sys_mod_count>843</sys_mod_count>
        <sys_name>Tasker List Task Tree</sys_name>
        <sys_package display_value="Tasker" source="x_153465_discovert">c6b1162d4fc10300303dc3818110c7b1</sys_package>
        <sys_policy>protected</sys_policy>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Tasker">c6b1162d4fc10300303dc3818110c7b1</sys_scope>
        <sys_update_name>sp_widget_890dd6cd4f589b00303dc3818110c70e</sys_update_name>
        <sys_updated_by>aalzyoud</sys_updated_by>
        <sys_updated_on>2019-03-20 19:02:27</sys_updated_on>
        <template><![CDATA[
<div ng-class="::{'hidden-xs' : options.hide_xs}" class="panel panel-{{::options.color}} b">
    <div class="panel-heading"><span>Task List View</span>
        <h4 class="panel-title">
            <span ng-if="::options.glyph">
                <fa name="{{::options.glyph}}" />
            </span>
        </h4>
    </div>
    <div id="task-tree"></div>
</div>
]]></template>
    </sp_widget>
</record_update>
