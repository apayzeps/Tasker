<?xml version="1.0" encoding="UTF-8"?><record_update table="sysauto_script">
    <sysauto_script action="INSERT_OR_UPDATE">
        <active>false</active>
        <condition/>
        <conditional>false</conditional>
        <name>INACTIVE_Tasker Daily Task Status Check</name>
        <run_as/>
        <run_as_tz/>
        <run_dayofmonth>1</run_dayofmonth>
        <run_dayofweek>1</run_dayofweek>
        <run_period>1970-01-01 01:00:00</run_period>
        <run_start>2018-03-28 19:04:23</run_start>
        <run_time>1970-01-01 20:00:00</run_time>
        <run_type>daily</run_type>
        <script><![CDATA[//Run find warning Hours
//Unassigned
_warningCritical('state', '-5');
//Rework
_warningCritical('state', '15');
//In Review
_warningCritical('state', '14');
//Work In Progress
_warningCritical('state', '13');
//Accepted
_warningCritical('state', '10');
//Assigned
_warningCritical('state', '1');
//Work Scheduled
_warningCritical('state', '12');


function _warningCritical(column, value)
{
	//Today Variables
	var today = new GlideDateTime();
	today = today.getDate();
	//Task GlideRecord
	var task = new GlideRecord('x_153465_discovert_route_task_instance');
	task = new GlideRecord('x_153465_discovert_route_task_instance');
	task.addQuery(column, value);
	task.query();
	
	while (task.next())
		{
		/* Time/Date calculations for suspense date is not needed.
		//Get Suspense Date
		var suspenseDate = new GlideDateTime();
		//Get Suspense Date or extended suspense date.
		if (task.suspense_date)
			{
				if (task.extended_suspense_date)
					{
						suspenseDate = new GlideDateTime(task.extended_suspense_date.toString());
					}
				else
					{
						suspenseDate = new GlideDateTime(task.suspense_date.toString());
					}
			}
		else
			{
				//Continue to the next tas.
				continue;
			}
			
		var warning = new GlideDateTime(suspenseDate.toString());
		warning.addDaysUTC((task.warning_hours * -1));
		*/
	
		if (task.status == "Critical")
			{
			_determineProfile('critical', task.sys_id);
		}
		else if (task.status == "Warning")
			{
			_determineProfile('warning', task.sys_id);
		}
	}
}
function _determineProfile(type, taskID)
{
	//Create query for who to notify.
	var notifyWho = new GlideRecord('x_153465_discovert_discover_notification_instance');
	notifyWho.addQuery('discover_task_instance', taskID);
	notifyWho.query();
	
	//Determine while a notifyWho exists if the recipient is a user, group, or external_email
	while (notifyWho.next())
		{
		//Create glideRecord for notification profiles.
		var notificationProfile = new GlideRecord('x_153465_discovert_tasker_notification_profile');
		//Create variable and assignment for recepient.
		var recipient = "";
		
		if (notifyWho.notification_user_type == 'user')
			{
			recipient = notifyWho.user;
			notificationProfile.addQuery('user', notifyWho.user);
		}
		else if (notifyWho.notification_user_type == 'group')
			{
			recipient = notifyWho.group;
			notificationProfile.addQuery('group', notifyWho.group);
		}
		else if (notifyWho.notification_user_type == 'external_email')
			{
			recipient = notifyWho.external_email;
			notificationProfile.addQuery('external_email', notifyWho.external_email);
		}
		else
			{
			//If notifyWho doesn't have a recipient, continue to next.
			continue;
		}
		
		notificationProfile.query();
		
		//Determine if the notification profile exists, if not get
		
		if (!notificationProfile.hasNext() && notifyWho.user)
			{
			//If no user profile is set, check for OU.
			var memberOU = new GlideRecord('x_153465_discovert_discover_office_members');
			memberOU.addQuery('office_member', notifyWho.user);
			memberOU.query();
			
			if (memberOU.hasNext())
				{
				memberOU.next();
				notificationProfile = new GlideRecord('x_153465_discovert_tasker_notification_profile');
				notificationProfile.addQuery('org_unit', memberOU.discover_office_hierarchy);
				notificationProfile.query();
			}
		}
		
		if (!notificationProfile.hasNext())
			{
			notificationProfile = new GlideRecord('x_153465_discovert_tasker_notification_profile');
			notificationProfile.addQuery('profile_level', 'global');
			notificationProfile.query();
		}
		
		if (notificationProfile.hasNext())
			{
			notificationProfile.next();
			
			if (notificationProfile.warning_hours && notifyWho.warning_hours)
				{
				_sendNotification(type, notifyWho.sys_id);
			}
		}
	}
}

function _sendNotification(changeType, sendTo)
{
	//Create Query for Notification template.
	var notificationTemplate = new GlideRecord('x_153465_discovert_notification_type');
	notificationTemplate.addQuery('notify_type', changeType);
	notificationTemplate.query();
	
	//Get Notify Who Record.
	var who = new GlideRecord('x_153465_discovert_discover_notification_instance');
	who.addQuery('sys_id', sendTo);
	who.query();
	who.next();
	
	//Queue the event to send the notification (notifyWho, Param1: Subject, Param2: Nntification Body)
	while (notificationTemplate.next())
		{
		gs.eventQueue("x_153465_discovert.Tasker_Notification", who, notificationTemplate.subject, notificationTemplate.email_body);
		gs.info("BKTEST Notification Sent To " + who.sys_id);
	}
}]]></script>
        <sys_class_name>sysauto_script</sys_class_name>
        <sys_created_by>bkeener</sys_created_by>
        <sys_created_on>2018-03-28 19:40:04</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>a4e70f3adb455f003a8d6be3ca961941</sys_id>
        <sys_mod_count>53</sys_mod_count>
        <sys_name>INACTIVE_Tasker Daily Task Status Check</sys_name>
        <sys_package display_value="Tasker" source="x_153465_discovert">c6b1162d4fc10300303dc3818110c7b1</sys_package>
        <sys_policy>protected</sys_policy>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Tasker">c6b1162d4fc10300303dc3818110c7b1</sys_scope>
        <sys_update_name>sysauto_script_a4e70f3adb455f003a8d6be3ca961941</sys_update_name>
        <sys_updated_by>KTorres</sys_updated_by>
        <sys_updated_on>2018-12-06 00:24:21</sys_updated_on>
        <upgrade_safe>false</upgrade_safe>
    </sysauto_script>
</record_update>
