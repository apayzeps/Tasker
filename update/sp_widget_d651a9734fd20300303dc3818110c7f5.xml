<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>custom</category>
        <client_script><![CDATA[function ($scope, $http,spModal, $location, $rootScope, spUtil, $interpolate) {
//------------------------------------------------------------------------------------------------------------------------
// COMPANY: DISCOVER TECHNOLOGIES
// CUSTOMIZED BY: KARINA TORRES
// RECURSIVE GRAPHICAL TREE FOR PROCESS TEMPLATE
// HELPUL LINKS: https://gojs.net/latest/intro/textblocks.html
//------------------------------------------------------------------------------------------------------------------------
	var c = this;
	var display_id = c.data.current_sys_id;
	var currentPage = document.location.search.split("&")[0].replace("?","").split("=")[1];
	var currentSysId = document.location.search.split("&")[2].replace("?","").split("=")[1];
	var selectedNode;
	var parentLink = '?id=discovertasker_processtemplatelist&table=x_153465_discovert_discover_routing_template&filter=process_level%3Dglobal_process%5ENQprocess_level%3Dou_process%5ENQprocess_level%3Dmy_process%5Eprocess_ownerDYNAMIC90d1921e5f510100a9ad2572f2b477fe%5EEQ';
	var diagram = {};			
	var breadCrumbs  = 
						 [{label: "Process Template List", url: parentLink}, //parent
						 {label: "Process Template Details ", url: '#'}]; 
	

	setTimeout(function () {
		if(currentPage != "discovertasker_processtemplatelist"){
			$rootScope.$broadcast('sp.update.breadcrumbs', breadCrumbs);}
		},500);

	//$('#uiNotificationContainer').css("z-index","1000000")
	if (currentSysId.length < 33) {
				diagram.div = null;

		c.data.current_sys_id = currentSysId;
		
		c.server.update();

			drawTree();
	}
	
	
	function nodeSelectionChanged(node) {
			
	
			var evt = {};
			var d = node.data;
			evt.sys_id = d.sys_id;
			if (evt.sys_id == display_id)  // get called twice by gojs
				return;
			evt.table = d.sys_class_name || d.table;
			display_id = evt.sys_id;
		
			$location.search('table', evt.table).search('sys_id', evt.sys_id).search('spa', 1);
			$rootScope.$broadcast('$sp.list.click', evt);
			
		/*
		spModal.open({
			title: "Process Information",
			widget: 'discovertasker-formtab', 
			widgetInput: {table: $scope.data.table , sys_id: item.sys_id},
			buttons: []
			
		}).then( function(){
			// update model after return from modal 
			c.server.update();
		});
	
			*/
	} 
	
	$scope.page = {
		displayValue: $scope.data.title,
		value: $scope.data.id,
		name: 'page'
	};
	c.clearDiagramTree =  function(){
				diagram.div = null;
	}
	
	$rootScope.$on('dataTableClick', function (event, item) {
		c.data.current_sys_id = item.sys_id;
		c.selectedNode = item.sys_id;
		
		if(item.process_level){
					c.data.process_level = item.process_level.display_value;

		}
		
		c.data.name = item.template_name.display_value;
		c.server.update();
	});
	
/*	$scope.$on("field.change", function (evt, parms) {
		if (parms.field.name == 'page')
			changePage(parms.newValue);
	});*/
	//create an empty diagram varibale to hold the gojs tree
	
	$rootScope.$on('dataTableClick', function (event, item) {
		diagram.div = null;
		drawTree();
	})

	function drawTree() {
				

		if(diagram.div == null){
			setTimeout(function () {	
				var $go = go.GraphObject.make; // for conciseness in defining templates
				var node_id = "page_map";
				//jslog(diagram.div)
				if(currentPage == "discovertasker_processtemplatedetails" ){
									c.data.name = $scope.data.map[0].process_name_map
									c.data.process_level = $scope.data.map[0].process_level_map

				}
				diagram = $go(go.Diagram, node_id, {
					initialAutoScale: go.Diagram.UniformToFill,
					allowVerticalScroll:false,
					//initialContentAlignment: go.Spot.Default,
					//allowZoom: false,
					// define the layout for the diagram
					layout: $go(go.TreeLayout, {
						nodeSpacing: 5,
						layerSpacing: 60
					})
				});
				diagram.model = new go.TreeModel($scope.data.map);
				//var font = "12px SourceSansPro, Helvetica, Arial, sans-serif";
				var fontStyle = "13px Segoe UI";
				// Define a simple node template consisting of text followed by an expand/collapse button
				diagram.nodeTemplate = $go(go.Node, "Horizontal", {
						selectionAdorned: false,
						selectionChanged: nodeSelectionChanged,
						isTreeExpanded: true,
						isTreeLeaf: true,
					}, // this event handler is defined below
					$go(go.Panel, "Auto",
						$go(go.Shape, "RoundedRectangle", {
								strokeWidth: 3
							}, {
								fill: "Gray"
							},
							new go.Binding("stroke", "isSelected", function (s) {
								if (s)
									return "#FFD247" //#2E3C54";
								else
									return null;
							}).ofObject(""),
							new go.Binding("opacity", "ribbon", function (r) {
								switch (r) {
									case ("3"):
										return 0.5;
									case ("4"):
										return 0.5;
									case ("7"):
										return 0.5;
								}
							}),
							new go.Binding("fill", "level", function (t) {
								switch (t) {
									/*
									case 1:
									return "#2E3C54";
									case 2:
									return "#00CCB1";
									case 3:
									return "#81C7CF";
									case 4:
									return "#FF7A46";
									case 4:
									return "#E06464";
									case 5:
									return "#A8AC5D";
									case 6:
									return "#C6A0C2";
									case 7:
									return "#ED949E";
									default:
									return "#4c6082";
									*/
									default: return "#2E3C54";
								}
							})
						),
						$go(go.TextBlock, {
								font: fontStyle,
								stroke: "white",
								margin: 3,
								width: 200
							},
							new go.Binding("text", "name"))
					),
					$go("TreeExpanderButton") // this was overkill for small diagrams
				);
				if(c.selectedNode == null){
					c.selectedNode = $scope.data.map[0].sys_id;
				}
				diagram.select(diagram.findNodeForKey(c.selectedNode));
				// Define a trivial link template with no arrowhead
						diagram.initialAutoScale=go.Diagram.Uniform;

				diagram.linkTemplate = $go(go.Link, {
					selectable: false
				}, $go(go.Shape)); // the link shape
				// Resize the graph container height when the graph changes size
				diagram.addDiagramListener('DocumentBoundsChanged', function () {
					var diagramHeight = parseInt(diagram.documentBounds.height);
					jQuery("#" + node_id).height(diagramHeight);
				})
				// Select the node using the sys_id parameter supplied.
				//var node_select = diagram.findNodeForKey(d.sys_id);
				//diagram.select(node_select);
				
			}, 1000);
			}
	}
}]]></client_script>
        <controller_as>c</controller_as>
        <css>#uiNotificationContainer { z-index: 10000; }

/*
.page-map {
  margin-top: .5em;
  margin-bottom: .5em;
  //border: 1px solid #ddd;
  width:100%;
  //height:120px;
  background-color: white;
}

*/

.designer-link {
  margin-top: .5em;
  margin-bottom: .5em;
  padding-left: 8px;  
}



.fa {
    display: inline-block;
    font: normal normal normal 14px/1 FontAwesome;
    font-size: inherit;
    text-rendering: auto;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
}

.placeholder-right-pane p {
    color: #81878E;
    font-size: 18px;
    font-weight: 300;
}

.placeholder-right-pane i {
    font-size: 200px;
    color: #E6E8EA;
}


a {
  margin: 10px!important;
}

a.span {
	font-family: Tahoma, Geneva, sans-serif!important;
}

//custom//
.note {
	float: right;
  padding-top: 12px;
} </css>
        <data_table>sp_instance</data_table>
        <demo_data/>
        <description/>
        <docs/>
        <field_list/>
        <has_preview>true</has_preview>
        <id>discovertasker-processtemplatetreegraph</id>
        <internal>false</internal>
        <link/>
        <name>Tasker Graph Process Template</name>
        <option_schema/>
        <public>false</public>
        <roles>x_153465_discovert.tasker_user</roles>
        <script><![CDATA[//------------------------------------------------------------------------------------------------------------------------
// COMPANY: DISCOVER TECHNOLOGIES
// CUSTOMIZED BY: KARINA TORRES & BRIAN KEENER
// GRAPHICAL TREE FOR PROCESS DEFINITION
//------------------------------------------------------------------------------------------------------------------------
(function(data) {
        //data.placeholderMsg = gs.getMessage("Select Process Definition ...");
        

				//------------------------------------------------------------------------------------------------------------------------
        // CUSTOM
        //------------------------------------------------------------------------------------------------------------------------
        data.page_id = $sp.getParameter("id");
        data.view = $sp.getParameter("view");
        data.filter = $sp.getParameter("filter");
        data.table = $sp.getParameter("table");
        data.isValid = true;
        //----------------------------------------------------------------------------------------------------
        // Initializing Variables
        //----------------------------------------------------------------------------------------------------
        var sys_id_topparenttask = null;
        var sys_id_currenttask = null;
        if (input) {
            data.sys_id = input.current_sys_id;
            id = input.current_sys_id;
            sys_id_currenttask = input.current_sys_id;
        }
        if ($sp.getParameter("table") == 'x_153465_discovert_discover_routing_template') {
            id = getProcessTemplate(sys_id_currenttask);
        } else {
            if ($sp.getParameter("table") == 'x_153465_discovert_route_tasks') {
                id = getTopParent(sys_id_currenttask);
            }
        }
        sys_id_topparenttask = id;
        data.sys_id_currenttask = sys_id_currenttask;
        data.table_detail = "x_153465_discovert_route_tasks";
        data.table_detail_sys_id = sys_id_topparenttask;
        //------------------------------------------------------------------------------------------------------------------------
        if (!id) {
            data.id = null;
            return;
        }
        var map = data.map = [];
        var gr = new GlideRecordSecure('x_153465_discovert_route_tasks');
        gr.addQuery('sys_id', id);
        gr.query();
        gr.next();
        data.id = gr.getValue('sys_id');
        data.title = gr.getValue('short_description');
        var m = getO(gr);
        m.name = gr.short_description.toString() + ' (' + gr.primary_assignee.getDisplayValue().toString() + ')';
        m.level = 1;
				m.process_level_map= gr.tasker_process_definition.process_level.getDisplayValue();
				m.process_name_map= gr.short_description.toString();
        map.push(m);
        getLevel1(map, gr.getValue('sys_id'), m.level);
        //------------------------------------------------------------------------------------------------------------------------
        //Get Tasks Level 1
        function getLevel1(map, sys_id) {
            var t = getGR('x_153465_discovert_route_tasks', 'parent', sys_id, 'route_order');
            while (t.next()) {
                var c = getO(t, sys_id);
                c.name = t.short_description.toString() + ' (' + t.primary_assignee.getDisplayValue().toString() + ')';
                if (t.route_order != null) c.name = t.route_order + ". " + c.name;
                c.level = 2;
                map.push(c);
                getLeveln(map, t.getValue('sys_id'), c.level);
            }
        }
        //Get Tasks Level 1++
        function getLeveln(map, sys_id, level) {
            var t = getGR('x_153465_discovert_route_tasks', 'parent', sys_id, 'number');
            var currentLevel = level + 1;
            while (t.next()) {
                var c = getO(t, sys_id);
                c.name = t.short_description.toString() + ' (' + t.primary_assignee.getDisplayValue().toString() + ')';
                if (t.route_order != null) c.name = t.route_order + ". " + c.name;
                c.parent = t.parent.toString();
                //c.status = t.status.toString();
                c.level = currentLevel;
                map.push(c);
                getLeveln(map, t.getValue('sys_id'), currentLevel);
            }
        }

        function getGR(table, parentField, parentID, orderby) {
            var t = new GlideRecordSecure(table);
            t.addQuery(parentField, parentID);
            t.orderBy(orderby);
            t.query();
            return t;
        }
        // object that goes in the array
        // common vars table, key, sys_id
        function getO(gr, parent) {
            var c = {};
            c.table = gr.getTableName();
            c.key = gr.getValue('sys_id');
            c.sys_id = gr.getValue('sys_id');
            if (c.status)
                c.status = gr.getValue('status');
            if (parent)
                c.parent = parent;
            return c;
        }
        //------------------------------------------------------------------------------------------------------------------------
        // GET THE TOP PARENT FOR THE CURRENT SYS_ID
        //------------------------------------------------------------------------------------------------------------------------
        function getProcessTemplate(sys_id_currenttask) {
            var grProcessTemplate = new GlideRecordSecure('x_153465_discovert_discover_routing_template');
            grProcessTemplate.addQuery('sys_id', sys_id_currenttask);
            grProcessTemplate.query();
            grProcessTemplate.next();

            if (grProcessTemplate.parent_task_def) {
							return grProcessTemplate.getValue('parent_task_def');
						}
               
        }
        //------------------------------------------------------------------------------------------------------------------------
        // GET THE TOP PARENT FOR THE CURRENT SYS_ID
        //---------------------------------------------)---------------------------------------------------------------------------
        function getTopParent(sys_id_currenttask) {
            var hasParent;
            var parentID;
            var parentProcessDefinition;
            var parentGR = new GlideRecordSecure('x_153465_discovert_route_tasks');
            parentGR.addQuery('sys_id', sys_id_currenttask);
            parentGR.query();
            parentGR.next();
            if (parentGR.parent) {
                hasParent = true;
                parentID = parentGR.getValue('parent');
                while (hasParent) {
                    var gp = new GlideRecordSecure('x_153465_discovert_route_tasks');
                    gp.addQuery('sys_id', parentID);
                    gp.query();
                    gp.next();
                    //parentProcessDefinition = gp.getValue('tasker_process_definition');
                    if (gp.parent) {
                        parentID = gp.getValue('parent');
                    } else {
                        hasParent = false;
                    }
                }
                //parentID = parentProcessDefinition;
            } else {
                parentID = sys_id_currenttask;
            }
            return parentID;
        }
	
			
//------------------------------------------------------------------------------------------------------------------------
})(data);
]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2017-11-14 21:17:38</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>d651a9734fd20300303dc3818110c7f5</sys_id>
        <sys_mod_count>1292</sys_mod_count>
        <sys_name>Tasker Graph Process Template</sys_name>
        <sys_package display_value="Tasker" source="x_153465_discovert">c6b1162d4fc10300303dc3818110c7b1</sys_package>
        <sys_policy>protected</sys_policy>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Tasker">c6b1162d4fc10300303dc3818110c7b1</sys_scope>
        <sys_update_name>sp_widget_d651a9734fd20300303dc3818110c7f5</sys_update_name>
        <sys_updated_by>aalzyoud</sys_updated_by>
        <sys_updated_on>2019-04-15 22:33:31</sys_updated_on>
        <template><![CDATA[<div ng-if="data.sys_id && data.page_id == 'discovertasker_processtemplatelist'" class="pull-right">
<a ng-click="c.clearDiagramTree()" href="?id=discovertasker_processtemplatedetails&&table={{data.table_detail}}&sys_id={{data.table_detail_sys_id}}"
 class="glyphicon glyphicon glyphicon-pencil" title="Edit Proccess Template in Full-screen" role="link" ></a>

</div>

<div class="panel panel-default">
<div class="panel-heading">
  
<h4 class="panel-title"><span ng-if="!c.data.name && (data.page_id != 'discovertasker_processtemplatedetails')">Select a Process Template from the list on the left</span><span ng-if="c.data.name">{{c.data.process_level + " - "}}  {{c.data.name}}</span></h4>
  <span class="note">Note: Hold CTRL and scroll the mouse wheel to zoom in and out.</span> 
</div>
<div class="panel-body">
 <div ng-if="!data.sys_id" class="col-md-12 text-center placeholder-right-pane ng-scope">
<i class="fa fa-gears" aria-hidden="true"></i>
<p class="m-t-lg">Select a Process Template from the list on the left</p>
 </div>
 <div ng-if="data.sys_id" >
 </div>
<div id="page_map" class="page-map" ng-show="data.id"/>
 </div>
</div>
<!--p style="text-align: right;"><a class="btn btn-primary"
href="discovertaskerportal?id=discovertasker_newtask&amp;table=x_153465_discovert_route_tasks&amp;sys_id=-
1&query=parent{{data.sys_id_currenttask}}">New</a></p-->]]></template>
    </sp_widget>
</record_update>
