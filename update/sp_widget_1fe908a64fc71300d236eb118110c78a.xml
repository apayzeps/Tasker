<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>custom</category>
        <client_script><![CDATA[function ($scope, $location, spUtil,$rootScope, amb, $http, spAriaUtil, $timeout, spModal) {
	var c = this;
	c.refresh = function(){
			if(c.data.page_id != "discovertasker_processtemplatedetails")
			c.server.update();
		
	}
	/*
	 * options:
	 * hide_footer (bool) = true to remove the data table footer contents
	 * hide_header (bool) = true to remove the data table header contents
	 * show_new (bool) = true to show the "New" record button
	 * show_keywords (bool) = true to show the keyword search field
	 * table (string) = the table name to query
	 * filter (string) = the encoded query
	 * o (string) = the order by column
	 * d (string) = The order by direction: asc or desc
	 * p (int) = the page to jump to
	 * fields (string) = comma seperated list of fields that become the list columns
	 * view (string) = the default view to load for columns, overrides fields
	*/
	
	// Sets the diffrent exporting data types that this table is capable of producing
	$scope.exportTypes = [{label:'PDF', value: 'PDF'}, {label:'Excel', value:'EXCEL'}, {label:'CSV', value:'CSV'}];
	var keys = ['table', 'filter', 'p', 'o', 'd'];

	// Sets an eventNames data object to be used in diffrent functions based on events
	var eventNames = {
		click: 'data_table.click',
		setFilter: 'data_table.setFilter',
		setKeywords: 'data_table.setKeywords'
	};
	
	// Listens to a declareActiveTab event to define the active tab in the data table
	$rootScope.$on('declareActiveTab', function (event, activeTab){
		c.activeTab = activeTab;
	})

	$scope.goTasker = function(table,item){
		var parms = {};
		parms.table = table;
		parms.sys_id = item.sys_id;
		parms.record = item;
		$scope.ignoreLocationChange = true;
		for (var x in c.data.list) {
				c.data.list[x].selected = false;
		}
		item.selected = true;
		
		if(c.data.page_id == "discovertasker_processtemplatelist"){
			$( "td" ).removeClass( "selected" )
			setTimeout(function(){
						item.selected = true;
			},20)
		}

		/*for (var y in c.data.list) {
			c.data.list[y].selected = false;
		}*/

	$rootScope.$emit('dataTableClick', item);
	var currentPageId = $location.search()['id'];
		if((currentPageId != ("discovertasker_processtemplatelist")) && (currentPageId!= "discovertasker_processtemplatedetails")){
			$scope.$emit(eventNames.click, parms);
		}
	}



	//----------------------------------------------------- Custom for Modal: KTorres
	$scope.openModal = function(item) {
		
		
		for (var x in c.data.items) {
			c.data.items[x].selected = false;
		} 
		
		item.selected = true;
		$scope.data.selected = item;
		
		/* opens the platform form in a modal for this table */
		spModal.open({
			title:$scope.data.table_label,//"Process Information",
			widget: 'discovertasker-formtab', 
			widgetInput: {table: $scope.data.table , sys_id: item.sys_id},
			size: 'lg',
			buttons: []
			
		}).then( function(){
			/* update model after return from modal */
			c.server.update();
		});
		$( "td" ).removeClass( "selected" );
	};
	
	$scope.openModalProcessTemplate = function(item) {
		for (var x in c.data.items) {
			c.data.items[x].selected = false;
		} 
		item.selected = true;
		$scope.data.selected = item;
		/* opens the platform form in a modal for this table */
		spModal.open({
			title: "Process Information",
			widget: 'discovertasker-formtab', 
			widgetInput: {table: $scope.data.table , sys_id: item.sys_id},
			size: 'lg',
			buttons: []
			
		}).then( function(){
			/* update model after return from modal */
			c.server.update();
		});
	};
	//----------------------------------------------------- KTorres
	
	$scope.go = function(table, item) {
		var parms = {};
		parms.table = table;
		parms.sys_id = item.sys_id;
		parms.record = item;
		$scope.ignoreLocationChange = true;
		for (var x in c.data.list) {
			c.data.list[x].selected = false;
		}
		item.selected = true;
		$scope.$emit(eventNames.click, parms);
	};

	$scope.newRecord = function(){
		var parms = {
			id: 'form',
			table: $scope.data.table,
			view: $scope.data.view,
			sys_id: '-1'
		};
		if ($scope.data.filter != '')
			parms.query = $scope.data.filter;

		$location.search(parms);
	};

	function recoverStateFromUrl() {
		$scope.data.fields = [];
		var s = $location.search();

		for (var x in keys) {
			if (s[keys[x]]) {
				$scope.data[keys[x]] = s[keys[x]];
			}
		}
		$scope.server.update().then(function(data) {
			if (s.sys_id) {
				for (var x in data.list) {
					if (data.list[x].sys_id == s.sys_id) {
						$scope.go(s.table, data.list[x]);
					}
				}
			}
		});
	}

	if ($scope.options.fromUrl) {
		var origSearch = $location.search();
		$scope.$on('$locationChangeSuccess', function(e) {
			var s = $location.search();
			if (origSearch.id !== s.id)
				return;

			if ($scope.ignoreLocationChange){
				$scope.ignoreLocationChange = false;
				return;
			}

			// Helps to recover state when using the browser's back button
			recoverStateFromUrl();
		});
	}


	$scope.getNumber = function(num) {
		return new Array(num);
	}

	$scope.mathMin = function(v1,v2) {
		return Math.min(v1,v2);
	}

	function getData(updateUrl) {
		var f = $scope.data;
		spUtil.update($scope).then(function(data) {
			f.view = data.view;
			if ($scope.options.fromUrl && updateUrl)
				setPermalink(f.table, f.filter, f.o, f.d, f.p);

			if ($scope.options.show_breadcrumbs && data.filterBreadcrumbs)
				$scope.$broadcast('widget-filter-breadcrumbs.setBreadcrumbs', data.filterBreadcrumbs.data, data.filter);

			initRecordWatcher(f.table, f.filter);
		});
	}

	function setPermalink(table, filter, orderBy, orderDirection, page){
		$scope.ignoreLocationChange = true;
		var search = $location.search();
		angular.extend(search, {
			spa: 1,
			table: table,
			filter: filter,
			p: page,
			o: orderBy,
			d: orderDirection
		});
		$location.search(search);
	}

	var watcher;
	function initRecordWatcher(table, filter){

		if (watcher)
			watcher.unsubscribe();

		if (table && filter) {
			var watcherChannel = amb.getChannelRW(table, filter);
			amb.connect();
			watcher = watcherChannel.subscribe(function(message) {
				if (!message.data)
					return;
				switch(message.data.action) {
					case "change":
						updateRowFromRW(message);
						break;
					case "exit":
						// A record was removed
					case "entry":
						// A record was added
						updateRowFromRW(message);
					default:
						spUtil.update($scope);
						break;
				}
			});
		}
	}
	// Calls the server and replaces the current options and data with the server response.
		spUtil.recordWatch($scope,"x_153465_discovert_discover_routing_template", "sys_id != ''", function(name, data) {
			spUtil.refresh($scope);
			$scope.server.update();

  });
	
	function updateRowFromRW(message) {
		if (message.data && message.data.sys_id && $scope.data.list) {
			var row, field;
			for(var i=0;i<$scope.data.list.length; i++) {
				
				row = $scope.data.list[i];
				if (row.sys_id == message.data.sys_id) {
					var fields = Object.getOwnPropertyNames(message.data.record);
					for(var f in fields) {
						field = fields[f];
						if(typeof row[field] !== 'undefined') {
						    row[field].display_value = message.data.record[field].display_value;
						}
					}
				}
			}
		}
	}

	$scope.$on('$destroy', function() {
		if (watcher)
			watcher.unsubscribe();
	});

	$scope.setPageNum = function(num) {
		$scope.data.p = num;
		getData(true);
		$timeout(function() {
			$scope.focusOnTableHeader();
		});
	}

	$scope.setOrderBy = function(field) {
		var d = "asc";
		if ($scope.data.o == field) {
			if ($scope.data.d == "asc")
				d = "desc";
			else
				d = "asc";
		}

		if (d === "asc") {
			spAriaUtil.sendLiveMessage($scope.data.msg.sortingByAsc);
		} else if (d === "desc") {
			spAriaUtil.sendLiveMessage($scope.data.msg.sortingByDesc);
		}

		$scope.data.o = field;
		$scope.data.d = d;
		$scope.setSearch(true);
	}

	$scope.setSearch = function(updateUrl) {
		$scope.data.p = 1;
		getData(updateUrl);
	}

	$scope.$on(eventNames.setFilter, function(e, newFilter){
		$scope.data.filter = newFilter;
		$scope.setSearch(false);
	});

	$scope.$on(eventNames.setKeywords, function(e, keywords){
		$scope.data.keywords = keywords;
		$scope.setSearch(false);
	});

	$scope.$on('widget-filter-breadcrumbs.queryModified', function(e, newFilter){
		$scope.data.filter = newFilter;
		$scope.setSearch(true);
	});

	$scope.rowsWerePruned = function() {
		if (!$scope.data.list)
			return;

		$scope.rowsPruned = $scope.mathMin($scope.data.window_end,$scope.data.row_count) - $scope.data.window_start - $scope.data.list.length;
		return $scope.rowsPruned > 0;
	}

	$scope.showFilter = function() {
		return !$scope.data.list.length && !$scope.data.num_pages && !$scope.data.invalid_table && !$scope.loadingData;
	}

	c.appendQuery = function(query){
		if ($scope.data.filter.length > 1)
			$scope.data.filter += '^';
		$scope.data.filter += query;
			$scope.setSearch();

	}

	// Makes Widget Async
	var title = $scope.data.title;
	if ($scope.options.use_instance_title == 'true')
		title = $scope.options.title;

	$scope.data = $scope.options;
		//jslog($scope.data.filter)
	$scope.loadingData = true;
	$scope.server.update().then(function() {
		//if ($scope.data.newButtonUnsupported)
			//jslog("Service Portal: New button not supported for sys_attachment list");
		$scope.loadingData = false;
		$scope.data.title = title;
		initRecordWatcher($scope.data.table, $scope.data.filter);
	});

	function parseQuery(table, queryString){
		return $http.post('/api/now/sp/parsequery/' + table, queryString).then(function(response){
				return response.data.result;
		});
	}

	c.createQueryTerm = function(table, field, sys_id, operator){
		return $http.get('/api/now/sp/getInOutQueryTerm', {
			params: {
				table: table,
				sys_id: sys_id,
				field: field,
				operator: operator
			}
		}).then(function(response){
			if (response && response.data && response.data.result)
				return response.data.result.parts;
		});
	}

	c.showMatching = function(field, newTerm) {
		var queryString = $scope.data.filter;
		var eq = "";
		parseQuery($scope.data.table, queryString).then(function(oldTerms) {
			for(var i=0; i<oldTerms.length; i++){
				var term = oldTerms[i];
				if (isSameField(newTerm, term))
					continue;

				if (eq.length)
					eq += '^';

				eq += getEncodedTerm(term);
			}
			if (eq.length)
					eq += '^';
			eq += getEncodedTerm(newTerm);

			$scope.data.filter = eq;
			$scope.setSearch();
		});
	};

	c.filterOut = function(field, newTerm) {
		var eq = $scope.data.filter;
		if (eq.length)
					eq += '^';

		eq += getEncodedTerm(newTerm);
		$scope.data.filter = eq;
		$scope.setSearch();
	};

	function isSameField(t1, t2) {
		if ('left' in t1 && 'left' in t2)
			return t1.left.field === t2.left.field;
		else if ('left' in t1)
			return t1.left.field === t2.field;
		else if ('left' in t2)
			return t1.field === t2.left.field;
		return t1.field === t2.field;
	}

	function getEncodedTerm(term) {
		var eq;
		if (term.left) {
			eq = getEncodedTerm(term.left);
			eq += '^OR';
			eq += getEncodedTerm(term.right);
		} else {
			eq = term.field;
			eq += term.operator;
			eq += term.value;
		}
		return eq;
	
}
	

}]]></client_script>
        <controller_as>c</controller_as>
        <css>//------------------------------------------------------------------------------------------------------------------------
// BY STATE
//------------------------------------------------------------------------------------------------------------------------
.red{background-color:red}
//State = Unassigned
span.label.label-Unassigned,
span.label.label-pill.label-Unassigned {
	background-color: #F6C716!important;
}

//State = Assigned
span.label.label-Assigned,
span.label.label-pill.label-Assigned {
	background-color: #4D8FAC;//#808080!important;  
}

//State = Accepted
span.label.label-Accepted,
span.label.label-pill.label-Accepted {
	background-color: #A0D468!important;
}

//State = Rejected
span.label.label-Rejected,
span.label.label-pill.label-Rejected {
	background-color: #FF6B61!important;
}

//State = Work in Progress
span.label.label-Work.in.Progress,
span.label.label-pill.label-Work.in.Progress {
	background-color: #2E3C54!important;
}

//State = Work in Scheduled
span.label.label-Work.Scheduled,
span.label.label-pill.label-Work.Scheduled {
	background-color: #2E3C54!important;
}

//State = In Review
span.label.label-In.Review,
span.label.label-pill.label-In.Review {
	background-color: #9A59B5!important;
}

//State = Rework
span.label.label-Rework,
span.label.label-pill.label-Rework {
	background-color: #2E3C54!important;
}

//State = Close Complete
span.label.label-Completed,
span.label.label-pill.label-Completed {
	background-color: #37C1C3!important;
}

//State = Close Incomplete
span.label.label-Closed.Incomplete,
span.label.label-pill.label-Closed.Incomplete {
	background-color: #37C1C3!important;
}

//State = Close Skipped
span.label.label-Cancelled ,
span.label.label-pill.label-Cancelled {
	background-color: #37C1C3!important;
}
//------------------------------------------------------------------------------------------------------------------------


.panel-heading {
  padding-left: 8px;
}

thead {
  border-bottom: 1px solid #ddd;
}

table {
  margin-bottom: 0;
}

.table &gt; thead &gt; tr &gt; th {
  border: 1px solid #ddd;
  cursor: pointer;
  vertical-align: middle;

  &amp;:nth-child(2) {
    border-left: none;
  }



  &amp;:last-child {
    border-right: none;
  }
}

th i {
  display: inline-block;
  margin-left: 5px;
  color: #A0A0A0;
}

th .disabled{
  color:#ddd;
}

.th-title {
  display: inline-block;
  color: $primary;
}

.panel-body {
  overflow: auto;
  padding: 0px;
}


.selected {
  color: #fff;
  background-color: #909090;
  border-color: 1px solid #fff;
}

tbody tr:last-child {
  border-bottom: none;
}

.pruned-msg {
  padding-bottom: 10px;
  padding-left: 4px;
  text-align: center;
}

.pruned-msg-filter-pad {
  padding-top:8px;
}

.filter-breadcrumbs {
  border-bottom: 1px solid #ddd;
  padding-top: 3px;
}

.dropdown-toggle {
  background: none;
  padding: 0 0 4px 0;
}

//-----------------

</css>
        <data_table>sp_instance_table</data_table>
        <demo_data>{"data":
	{
		"table": "incident",
		"view": "default",
		"o": "opened_at",
		"d": "desc",
		"filter": "activeEQtrue",
		"p": 1,
		"fields": "number,short_description"
	}
}</demo_data>
        <description/>
        <docs/>
        <field_list>table,filter,field_list,maximum_entries,order,order_by,order_direction,title,color,glyph,sp_page</field_list>
        <has_preview>false</has_preview>
        <id>discovertasker-widget-data-table</id>
        <internal>false</internal>
        <link><![CDATA[function(scope, element, attrs, ctrl){
	var $ul, $contextMenu;
	
	scope.focusOnTableHeader = function() {
		element.find(".data-table-title").attr("tabindex", "-1").focus();
	}
	
	element.on('contextmenu', function(e){
		if (e.ctrlKey)
			return; // ctrlKey is for the debug menu, not this menu
		
		var rowScope = angular.element(e.target).scope();
		var field, item, fieldVal;
		
		// Context Menu for tbody
		if (angular.isDefined(rowScope.field) && angular.isDefined(rowScope.item)){
			e.preventDefault();
			field = rowScope.field;
			item = rowScope.item;
			fieldVal = item[field].value;
			
			var items = [
			['${Show Matching}', function(){
				ctrl.createQueryTerm(scope.data.table, field, item.sys_id, '=').then(function(term){
					ctrl.showMatching(field, term);
				});
			}],
			['${Filter Out}', function(){
				ctrl.createQueryTerm(scope.data.table, field, item.sys_id, '!=').then(function(term){
					ctrl.filterOut(field, term);
				});
			}]
			];
			
			renderContextMenu(items);
			setContextMenuPosition(e);
		}
	});
	
	function renderContextMenu(items){
		var scrollHeight = $('body').get(0).scrollHeight;
		$contextMenu = angular.element('<div>', {'class': 'dropdown clearfix context-dropdown open'});
			
			$contextMenu.on('click', function (e) {
				if ($(e.target).hasClass('dropdown')) {
					_clearContextMenus(event);
				}
			});
			$contextMenu.on('contextmenu', function (event) {
				event.preventDefault();
				_clearContextMenus(event);
			});
			
			$contextMenu.css({
				position: 'absolute',
				top: 0,
				height: scrollHeight,
				left: 0,
				right: 0,
				zIndex: 9999
			});
			
			$('body').append($contextMenu);
			
			$ul = angular.element('<ul>', {
				'class': 'dropdown-menu',
				'role': 'menu'
			});
			renderItems();
			$contextMenu.append($ul);
			
			function renderItems(){
				angular.forEach(items, function (item) {
					var $li = angular.element('<li>');
					
					if (item === null) {
						$li.addClass('divider');
					} else {
						var $a = angular.element('<a>');
						$a.attr({tabindex: '-1', href:'#'});
							$a.text(item[0]);
							$li.append($a);
							$li.on('click', function (e) {
								e.preventDefault();
								scope.$apply(function () {
									_clearContextMenus(e);
									item[1].call(item, item);
								});
							});
						}
						
						$ul.append($li);
					});
				}
			}
			
			function _clearContextMenus(event){
				if (!event){
					return;
				}
				
				angular.element(event.currentTarget).removeClass('context');
				
				var els = angular.element(".context-dropdown");
				angular.forEach(els, function(el){
					angular.element(el).remove();
				});
			}
			
			var contextMenuItemHeight = 0;
			function setContextMenuPosition(event){
				if (contextMenuItemHeight === 0)
					contextMenuItemHeight = $ul.children(0).height();
				
				// Why not just call .width() and .height() on the container? Because those calculations cause browsers to reflow
				// that can cause IE10 to take 200ms to render a context menu.
				var cmWidth = 150;
				var cmHeight = contextMenuItemHeight * $ul.children().length;
				var startX = event.pageX + cmWidth >= window.innerWidth ? event.pageX - cmWidth : event.pageX;
				var startY = event.pageY + cmHeight >= window.innerHeight ? event.pageY - cmHeight : event.pageY;
				
				$ul.css({
					display: 'block',
					position: 'absolute',
					left: startX,
					top: startY,
					'min-width': cmWidth
				});
			}
		}]]></link>
        <name>Tasker Data Table</name>
        <option_schema>[{"hint":"If enabled, show the list filter in the breadcrumbs of the data table","name":"enable_filter","default_value":"false","section":"Behavior","label":"Enable Filter","type":"boolean"},{"hint":"If true, ope the row details in a modal","name":"open_row_details_in_modal","default_value":"false","label":"Open row details in modal","type":"boolean"}]</option_schema>
        <public>false</public>
        <roles>x_153465_discovert.tasker_user</roles>
        <script><![CDATA[(function() {
	if (!input) // asynch load list
		return;

	data.msg = {};
	data.msg.sortingByAsc = gs.getMessage("Sorting by ascending");
	data.msg.sortingByDesc = gs.getMessage("Sorting by descending");

	data.title = options.title || input.title;


	/*
	 * data.table = the table
	 * data.p = the current page starting at 1
	 * data.o = the order by column
	 * data.d = the order by direction
	 * data.keywords = the keyword search term
	 * data.list = the table data as an array
	 * data.invalid_table = true if table is invalid or if data was not succesfully fetched
	 * data.table_label = the table's display name. e.g. Incident
	 * data.table_plural = the table's plural display name. e.g. Incidents
	 * data.fields = a comma delimited list of field names to show in the data table
	 * data.column_labels = a map of field name -> display name
	 * data.window_size = the number of rows to show
	 * data.filter = the encoded query
	 */
	// copy to data[name] from input[name] || option[name]
	optCopy(['table', 'p', 'o', 'd', 'filter', 'filterACLs', 'fields', 'keywords', 'view']);
	optCopy(['relationship_id', 'apply_to', 'apply_to_sys_id', 'window_size']);
	if (!data.table) {
		data.invalid_table = true;
		data.table_label = "";
		return;
	}

	if (!data.fields) {
		if (data.view)
			data.fields = $sp.getListColumns(data.table, data.view);
		else
			data.fields = $sp.getListColumns(data.table);
	}
	data.showInactiveProcess = input.showInactiveProcess;
	data.view = data.view || 'mobile';
	data.table = data.table || $sp.getValue('table');
	data.filter = data.filter || $sp.getValue('filter');
	data.keywords = data.keywords || $sp.getValue('keywords');
	data.p = data.p || $sp.getValue('p') || 1;
	data.p = parseInt(data.p);
	data.o = data.o || $sp.getValue('o') || $sp.getValue('order_by');
	data.d = data.d || $sp.getValue('d') || $sp.getValue('order_direction');
	data.page_index = data.p - 1;
	data.show_new = data.show_new || options.show_new;
	var windowSize = data.window_size || $sp.getValue('maximum_entries') || 20;
	windowSize = parseInt(windowSize);
	if (isNaN(windowSize) || windowSize < 1)
		windowSize = 20;
	data.window_size = windowSize;

	var gr;
	///if (gs.getProperty("glide.security.ui.filter") == "true" || GlideTableDescriptor.get(data.table).getED().hasAttribute("glide.security.ui.filter")) { // From Global. KTorres
	if (gs.getProperty("glide.security.ui.filter") == "true" ) {
		gr = new FilteredGlideRecord(data.table);
		gr.applyRowSecurity();
	} else
		gr = new GlideRecordSecure(data.table);
	if (!gr.isValid()) {
		data.invalid_table = true;
		data.table_label = data.table;
		return;
	}

  data.canCreate = gr.canCreate();
	data.newButtonUnsupported = data.table == "sys_attachment";
	data.table_label = gr.getLabel();
	//data.table_plural = gr.getPlural(); // From Global. KTorres
	data.table_plural = input.title || data.table_label;

	if (data.filter) {
		if (data.filterACLs)
			gr = $sp.addQueryString(gr, data.filter);
		else
			gr.addEncodedQuery(data.filter);
	}

	if (data.keywords){
		gr.addQuery('123TEXTQUERY321', data.keywords);
		data.keywords = null;
	}

	data.filter = gr.getEncodedQuery();

	if (data.relationship_id) {
		var rel = GlideRelationship.get(data.relationship_id);
		var target = new GlideRecord(data.table);
		var applyTo = new GlideRecord(data.apply_to);
		applyTo.get("sys_id", data.apply_to_sys_id);
		rel.queryWith(applyTo, target); // put the relationship query into target
		gr.addEncodedQuery(target.getEncodedQuery()); // get the query the relationship made for us
	}

	if (data.o){
		if (data.d == "asc")
			gr.orderBy(data.o);
		else
			gr.orderByDesc(data.o);
	}
	// only show active process ----------------------
if (data.table == 'x_153465_discovert_discover_routing_template' && data.showInactiveProcess != true){
							gr.addQuery('u_active',true)
			}

	data.window_start = data.page_index * data.window_size;
	data.window_end = (data.page_index + 1) * data.window_size;
	gr.chooseWindow(data.window_start, data.window_end);
	gr._query();

	data.row_count = gr.getRowCount();
	data.num_pages = Math.ceil(data.row_count / data.window_size);
	data.column_labels = {};
	data.fields_array = data.fields.split(',');

	// use GlideRecord to get field labels vs. GlideRecordSecure
	var grForLabels = new GlideRecord(data.table);
	for (var i in data.fields_array) {
		var field = data.fields_array[i];
		var ge = grForLabels.getElement(field);
		if (ge == null)
			continue;

		data.column_labels[field] = ge.getLabel();
	}

	data.list = [];
	while (gr._next()) {
		var record = {};
		$sp.getRecordElements(record, gr, data.fields);
		//if (gr instanceof FilteredGlideRecord) {  //From Global. KTorres
			// FilteredGlideRecord doesn't do field-level
			// security, so take care of that here
			for (var f in data.fields_array) {
				var fld = data.fields_array[f];
				if (!gr.isValidField(fld))
					continue;

				if (!gr[fld].canRead()) {
					record[fld].value = null;
					record[fld].display_value = null;
				}
			}
		//} //From Global 
		record.sys_id = gr.getValue('sys_id');
		data.list.push(record);
	}
	data.open_row_details_in_modal = (input.open_row_details_in_modal == true || input.open_row_details_in_modal == "true" || options.open_row_details_in_modal == true || options.open_row_details_in_modal == "true"); //New feature added. KTorres
	data.enable_filter = (input.enable_filter == true || input.enable_filter == "true" ||
		options.enable_filter == true || options.enable_filter == "true");
	var breadcrumbWidgetParams = {
		table: data.table,
		query: data.filter,
		enable_filter: data.enable_filter
	};
	data.filterBreadcrumbs = $sp.getWidget('widget-filter-breadcrumbs', breadcrumbWidgetParams);

	// copy to data from input or options
	function optCopy(names) {
		names.forEach(function(name) {
			data[name] = input[name] || options[name];
		})
	}

})();]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2018-07-04 20:41:33</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>1fe908a64fc71300d236eb118110c78a</sys_id>
        <sys_mod_count>933</sys_mod_count>
        <sys_name>Tasker Data Table</sys_name>
        <sys_package display_value="Tasker" source="x_153465_discovert">c6b1162d4fc10300303dc3818110c7b1</sys_package>
        <sys_policy>protected</sys_policy>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Tasker">c6b1162d4fc10300303dc3818110c7b1</sys_scope>
        <sys_update_name>sp_widget_1fe908a64fc71300d236eb118110c78a</sys_update_name>
        <sys_updated_by>kbaton</sys_updated_by>
        <sys_updated_on>2019-04-01 20:09:59</sys_updated_on>
        <template><![CDATA[  <div class="panel panel-{{options.color}} b">
    <div class="panel-heading form-inline" ng-hide="options.hide_header">
      <span class="dropdown m-r-xs">
        <button aria-label="${Table menu}" class="btn dropdown-toggle glyphicon glyphicon-menu-hamburger" style="line-height: 1.4em" id="optionsMenu" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false"></button>
        <ul class="dropdown-menu" aria-labelledby="optionsMenu">
          <li ng-repeat="t in ::exportTypes">
            <a ng-href="/{{data.table}}_list.do?{{::t.value}}&sysparm_query={{data.filter}}&sysparm_view={{data.view}}&sysparm_fields={{data.fields}}" target="_new">${Export as} {{::t.label}}</a>
          </li>
        </ul>
      </span>
      <span class="panel-title"><i ng-if="options.glyph" class="fa fa-{{options.glyph}} m-r"></i>{{data.title || data.table_plural}}</span>
      <button name="new" role="link" class="btn btn-primary btn-sm m-l-xs" ng-click="newRecord()" ng-if="options.show_new && data.canCreate && !data.newButtonUnsupported" aria-label="${Create new record}">${New}</button>
      <div class="pull-right" ng-if="options.show_keywords">
		<form ng-submit="setSearch(true)">
        <div class="input-group">
          <input type="text" name="datatable-search" ng-model="data.keywords" class="form-control" placeholder="${Keyword Search}">
          <span class="input-group-btn">
            <button name="search" class="btn btn-default" type="submit" aria-label="${Search}"><span class="glyphicon glyphicon-search"></span></button>
          </span>
        </div>
        </form>
      </div>
      <div class="clearfix"></div>
      
    </div>
    <!-- body -->
    <div class="panel-body">
      <h2 class="sr-only data-table-title">{{data.title || data.table_plural}} ${table} - ${page} {{data.p}}</h2>
      <div ng-if="options.show_breadcrumbs && (data.filter || data.enable_filter)" class="filter-breadcrumbs">
	    		<sp-widget widget="data.filterBreadcrumbs"></sp-widget>
      </div>
      <div class="alert alert-info" ng-if="!data.list.length && !data.num_pages && !data.invalid_table && !loadingData">
        ${No records in {{data.table_label}} <span ng-if="data.filter">using that filter</span>}
      </div>
      <div class="alert alert-info" ng-if="loadingData">
          <fa name="spinner" spin="true"></fa> ${Loading data}...
       </div>

      <table class="table table-striped table-responsive" ng-if="data.list.length">
        <thead>
          <tr>
            <th class="sr-only"></th>
            <th ng-repeat="field in data.fields_array track by $index" ng-click="setOrderBy(field)" tabindex="0">
              <div class="th-title" aria-label="${Sort by } {{data.column_labels[field]}}">{{data.column_labels[field]}}</div>
              <i class="fa" ng-if="field == data.o" ng-class="{'asc': 'fa-chevron-up', 'desc': 'fa-chevron-down'}[data.d]" aria-label="${Sorted by } {{data.column_labels[field]}} {{data.d == 'asc' ?  '${Ascending}': '${Descending}' }}"></i>
            </th>
          </tr>
        </thead>
        <tbody>
          
         <!-- OPEN IN A PAGE DETAIL -->

         <tr ng-if="!data.open_row_details_in_modal" class="" ng-click="goTasker(data.table, item)" ng-repeat="item in data.list track by item.sys_id">
            <td class="sr-only" tabindex="0" role="link"aria-label="${Open record}"></td>
         		 <!--  && item.schedules.display_value == '1' -->
           <td ng-if="field != 'actions' && field != 'schedules'"
                    role="text" aria-label="{{item[field].display_value}}" class="pointer sp-list-cell" ng-class="{selected: item.selected}"  ng-repeat="field in ::data.fields_array" 
                  data-field="{{::field}}" data-th="{{::data.column_labels[field]}}">{{::item[field].display_value}}</td>
            <td ng-if="field == 'schedules'"
                    role="text" aria-label="{{item[field].display_value}}" class="pointer sp-list-cell" ng-class="{selected: item.selected}"  ng-repeat="field in ::data.fields_array" 
                data-field="{{::field}}" data-th="{{::data.column_labels[field]}}"><a href="javascript:void(0)" class="label label-as-badge label-primary" >{{::item[field].display_value}}</a> </td>
            <td ng-if="field == 'actions'" role="text" aria-label="{{item[field].display_value}}" class="pointer sp-list-cell" ng-class="{selected: item.selected}"  ng-repeat="field in ::data.fields_array" 
                data-field="{{::field}}" data-th="{{::data.column_labels[field]}}">
							<button type="button" class="btn btn-primary btn-sm btn-block" ng-click="openModalProcessTemplate(item)">View/Run</button>
           </td>
          </tr>
          
          <!-- OPEN IN A MODAL -->
          <tr ng-if="data.open_row_details_in_modal == true" ng-repeat="item in data.list track by item.sys_id">
            <td class="sr-only" tabindex="0" role="link" ng-click="openModal(item)" aria-label="${Open record}"></td>
            <td role="text" aria-label="{{item[field].display_value}}" class="pointer" ng-class="{selected: item.selected}" ng-click="openModal(item)" ng-repeat="field in ::data.fields_array" 
                data-field="{{::field}}" data-th="{{::data.column_labels[field]}}">{{::item[field].display_value}}</td>
          </tr>
          
          	
        </tbody>
      </table>
      <div ng-class="{'pruned-msg-filter-pad': (!options.show_breadcrumbs || !data.filter) && !data.list.length}" class="pruned-msg" ng-if="rowsWerePruned()">
        <span ng-if="rowsPruned == 1">${{{rowsPruned}} row removed by security constraints}</span>
        <span ng-if="rowsPruned > 1">${{{rowsPruned}} rows removed by security constraints}</span>
      </div>
    </div>
    <!-- footer -->
    <div class="panel-footer" ng-hide="options.hide_footer" ng-if="data.row_count">
      <div class="btn-toolbar m-r pull-left">
        <div class="btn-group">
          <a ng-disabled="data.p == 1" href="javascript:void(0)" ng-click="setPageNum(data.p - 1)" class="btn btn-default"  aria-label="${Previous page}"><i class="fa fa-chevron-left"></i></a>
        </div>
        <div ng-if="data.num_pages > 1 && data.num_pages < 20" class="btn-group">
          <a ng-repeat="i in getNumber(data.num_pages) track by $index" ng-click="setPageNum($index + 1)" href="javascript:void(0)" ng-class="{active: ($index + 1) == data.p}" type="button" class="btn btn-default" aria-label="${Page} {{$index + 1}}">{{$index + 1}}</a>
        </div>
        <div class="btn-group">
          <a ng-disabled="data.p == data.num_pages" href="javascript:void(0)" ng-click="setPageNum(data.p + 1)" class="btn btn-default" aria-label="${Next page}"><i class="fa fa-chevron-right"></i></a>
        </div>
      </div>
      <div class="m-t-xs panel-title">${Rows {{data.window_start + 1}} - {{ mathMin(data.window_end,data.row_count) }} of {{data.row_count}}}</div>
      <span class="clearfix"></span>
    </div>
  </div>

]]></template>
    </sp_widget>
</record_update>
