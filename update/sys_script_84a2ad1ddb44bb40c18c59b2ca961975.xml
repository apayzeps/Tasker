<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="sys_script">
    <sys_script action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>false</action_insert>
        <action_query>false</action_query>
        <action_update>true</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection>x_153465_discovert_discover_office_hierarchy</collection>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition table="x_153465_discovert_discover_office_hierarchy">activeCHANGESFROMtrue^EQ<item endquery="false" field="active" goto="false" newquery="false" operator="CHANGESFROM" or="false" value="true"/>
            <item endquery="true" field="" goto="false" newquery="false" operator="=" or="false" value=""/>
        </filter_condition>
        <is_rest>false</is_rest>
        <message/>
        <name>OrgHierarchy - Mark as Inactive</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[ (function executeRule(current, previous /*null when async*/) {
	var tcs = new TaskerCommonScriptingMethods();
	try {
		var answer = false;
		var activeTasksInfoMessage = "";
		var activeMembersInfoMessage = "";
		var activeChildrenInfoMessage = "";
		var ouHierarchyTableName = "x_153465_discovert_discover_office_hierarchy";
		var taskingAuthorityTableName = "x_153465_discovert_tasking_authority";
		var ouMembersTableName = "x_153465_discovert_discover_office_members";
		var taskTableName = "x_153465_discovert_route_task_instance";
		var user = gs.getUser();
		var globalOuRole = "x_153465_discovert.tasker_organizational_admin";
		var singleOuRole = "x_153465_discovert.tasker_single_ou_admin";
		var requiredRoles = [];
		var checkTemplateCreator = [];
		var processTemplateCreatorCheck = false;
		var ouId = current.sys_id;
		
		//chain up the parents until you find a valid TA to replace
		// var parentRecordTable = new GlideRecord(ouHierarchyTableName);
		// var parentRecord = parentRecordTable.get(current.parent);
		// var isTa = false;
		// while(parentRecord && !isTa) {
		// 	var taskingAuthorityQuery = [];
		// 	taskingAuthorityQuery.push({"organizational_unit":parentRecord.sys_id})
		// 	tcs.queryRelatedShort(taskingAuthorityTableName, taskingAuthorityQuery, function(record) {
		// 		if(record.active) {
		// 			isTa = true;
		// 			return null;
		// 		}
		// 		return false;
		// 	}, true);
		// 	if(!isTa) {
		// 		parentRecord = parentRecordTable.get(parentRecord.parent);
		// 	}
		// }
		// valid Org TA is stored in parentRecord at this point or null if parentRecord has no highest TA
		
		// check if members still in ou

		// check if children, members, tasks inactive
		var isOuDependentsActive = function() {
			var hasActive = false;
			var hasHierarchyChildren = false;
			var hasOuMembers = false;
			var hasTasks = false;
		
			var childrenQuery = [];
			childrenQuery.push({"parent":ouId});

			var ouMemberTableQuery = [];
			ouMemberTableQuery.push({"discover_office_hierarchy":ouId});
			
			var primaryAssigneeQuery = [];
			primaryAssigneeQuery.push({"primary_assignee":ouId});
			
			var primaryOfficeQuery = [];
			primaryOfficeQuery.push({"primary_office":ouId});

			var taskingAuthorityQuery = [];
			taskingAuthorityQuery.push({"organizational_unit":ouId});


			// check if any children active
			tcs.queryRelatedShort(ouHierarchyTableName, childrenQuery, function(record) {
				if(record.getValue("active") == true || record.getValue("u_active") == true) {
					hasActive = true;
					hasHierarchyChildren = true;
					return null;
				} else return false;
			}, true);
			
			// check if any members active
			tcs.queryRelatedShort(ouMembersTableName, ouMemberTableQuery, function(record) {
				hasOuMembers = true;
				hasActive = true;
				return null;
			}, true);

			// check if any tasks with ou in primary assignee active
			tcs.queryRelatedShort(taskTableName, primaryAssigneeQuery, function(record) {
				if(record.getValue("active") == true || record.getValue("u_active") == true) {
					hasActive = true;
					hasTasks = true;
					return null;
				} else return false;
			}, true);

			// check if any tasks with ou in primary office active
			tcs.queryRelatedShort(taskTableName, primaryOfficeQuery, function(record) {
				if(record.getValue("active") == true || record.getValue("u_active") == true) {
					hasActive = true;
					hasTasks = true;
					return null;
				} else return false;
			}, true);
			
			// get active tasking authorities associated with this ou
			var taskingAuthorities = tcs.queryRelated(taskingAuthorityTableName, taskingAuthorityQuery, function(record) {
				if(record.active) {
					return record.sys_id;
				}
				return null;
			});
			// for each associated tasking authority, check to see if any active tasks have the ou ta assigned
			var taSave = "";
			taskingAuthorities.forEach(function(ta){
				// save the ta for lookup
				taSave = ta;
				var taQuery = [];
				taQuery.push({"tasking_authority": ta});
				tcs.queryRelatedShort(taskTableName, taQuery, function(record) {
					if(record.getValue("active") == true) {
						hasActive = true;
						hasTasks = true;
						return null;
					} else return false;
				}, true);
			});
			return {
				"active":hasActive,
				"children":hasHierarchyChildren,
				"members":hasOuMembers,
				"tasks":hasTasks,
				"ta": taSave
			};
		};
		var constructTaLink = function(ouSysId, taSysId) {
			return "../x_153465_discovert_route_task_instance_list.do?sysparm_query=primary_assignee%3D" + ouSysId + "%5ENQprimary_office%3D"
				+ ouSysId + "%5ENQtasking_authority%3D" + taSysId;
		};
		var notifyUserOfActive = function(activeSections) {
			var message = "";
			var membersLink = "<a href='../x_153465_discovert_discover_office_members_list.do?sysparm_query=discover_office_hierarchy%3D"+ouId+"'>link</a>";
			var ouLink = "<a href='../x_153465_discovert_discover_office_hierarchy_list.do?sysparm_query=parent%3D"+ouId+"%5Eactive%3Dtrue'>link</a>";
			var taskLink = "<a href='"+ constructTaLink(ouId, activeSections.ta) + "'>link</a>";
			if(activeSections.children) {
				message += "<br/> " + current.numberofchildous + " Sub OUs [" + ouLink + "]";
			} 
			if(activeSections.members) {
// 				if(message != "")
// 					message += ", "+ current.numberofmembersinou + " Members ["+ membersLink +"]";
// 				else
					message += "<br/> " +current.numberofmembersinou +" Members ["+ membersLink +"]";
			} 
			if(activeSections.tasks) {
// 				if(message != "")
// 					message += " and " + current.numberofactivetasksinou + " Tasks ["+ taskLink +"]";
// 				else
					message += "<br/> " +current.numberofactivetasksinou +" Tasks where " + current.office_abbreviation + " is Primary Assignee, Primary Office or Tasking Authority ["+ taskLink +"]";
			}
			tcs.commonMessage("Organizational Hierarchy Active Dependencies", message + "<br/> Please purge before deactivating this OU.", gs.addErrorMessage);
		};

		if(tcs.checkUserForSingleRoleMatch(gs.getUser(), [globalOuRole])) {
			var activeSections = isOuDependentsActive();
			if(!activeSections.active) {
				answer = true;
			} else {
				notifyUserOfActive(activeSections);
				answer = false;
			}
		} else if(tcs.checkUserForSingleRoleMatch(gs.getUser(), [singleOuRole])) {
			var activeSections2 = isOuDependentsActive();
			if(!activeSections2.active) {
				var userInfoScripts = new UserInfoScripts();
				var currentUserId = user.getID();
				if(ouId !== "" && userInfoScripts.IsUserInOU(ouId, currentUserId)) {
					answer = true;
				}
			} else {
				notifyUserOfActive(activeSections2);
				answer = false;
			}
		} else {
			answer = false;
			tcs.invalidPermissionsMessage("Organizational Hierarchy", "deactivation", gs.addInfoMessage);
			tcs.invalidPermissionsMessage("Organizational Hierarchy", "deactivation", gs.warn); //DEBUG
		}
		if(!answer) {
			current.active = previous.active;
			current.setWorkflow(false);
			current.update();
		} else {
			current.active = false;
			current.setWorkflow(false);
			current.update();
		}
	} catch(e) {
		tcs.checkException("ProcessTemplateTask", gs.warn, e);
		current.active = previous.active;
		current.setWorkflow(false);
		current.update();
	}
})(current, previous);]]></script>
        <sys_class_name>sys_script</sys_class_name>
        <sys_created_by>kbaton</sys_created_by>
        <sys_created_on>2019-03-06 19:14:01</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>84a2ad1ddb44bb40c18c59b2ca961975</sys_id>
        <sys_mod_count>29</sys_mod_count>
        <sys_name>OrgHierarchy - Mark as Inactive</sys_name>
        <sys_overrides/>
        <sys_package display_value="Tasker" source="x_153465_discovert">c6b1162d4fc10300303dc3818110c7b1</sys_package>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Tasker">c6b1162d4fc10300303dc3818110c7b1</sys_scope>
        <sys_update_name>sys_script_84a2ad1ddb44bb40c18c59b2ca961975</sys_update_name>
        <sys_updated_by>KTorres</sys_updated_by>
        <sys_updated_on>2019-04-02 01:27:56</sys_updated_on>
        <template/>
        <when>before</when>
    </sys_script>
    <sys_translated_text action="delete_multiple" query="documentkey=84a2ad1ddb44bb40c18c59b2ca961975"/>
</record_update>
