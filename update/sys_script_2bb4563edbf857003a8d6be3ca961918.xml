<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="sys_script">
    <sys_script action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>false</action_insert>
        <action_query>false</action_query>
        <action_update>true</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection>x_153465_discovert_route_task_instance</collection>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition table="x_153465_discovert_route_task_instance">stateCHANGESTO7^ORstateCHANGESTO3^ORstateCHANGESTO4^EQ<item endquery="false" field="state" goto="false" newquery="false" operator="CHANGESTO" or="false" value="7"/>
            <item endquery="false" field="state" goto="false" newquery="false" operator="CHANGESTO" or="true" value="3"/>
            <item endquery="false" field="state" goto="false" newquery="false" operator="CHANGESTO" or="true" value="4"/>
            <item endquery="true" field="" goto="false" newquery="false" operator="=" or="false" value=""/>
        </filter_condition>
        <is_rest>false</is_rest>
        <message/>
        <name>Tasker - On Cancel or Close</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/) {
	
	// if any subtaskers are still open close complete, close incomplete, or cancel them
	var grSubTasks = new GlideRecord('x_153465_discovert_route_task_instance');
	grSubTasks.addQuery('parent', current.sys_id);
	grSubTasks.addQuery('state', '!=', 3);
	grSubTasks.addQuery('state', '!=', 4);
	grSubTasks.addQuery('state', '!=', 7);
	grSubTasks.query();
	
	
	while (grSubTasks.next()){
		grSubTasks.state = current.state;
		// TODO, change text to pull from message for multi language support
		var msg = 'Parent set to:';
		// check to see if parent information is already in the close note.
		// this should only be added at the top level
		// as it flows down the chain, the top message pushes down
		if(current.close_notes.toString().indexOf(msg)==0)
			grSubTasks.close_notes = msg + ' (' + current.state + ') - Organizational Unit: (' + current.primary_assignee + ') - Close Note:'  + current.close_notes;
		else
			grSubTasks.close_notes = current.close_notes;
		grSubTasks.update();
	}
	
	// RAJ - STRY0010303 - 2018-04-03 move any attachments marked as promotable to Parent.
	// if the task has a parent and the task was completed, (not cancelled or closed incomplete), then copy attachments to parent.
	// NOTE: TODO - STILL NEED TO UPDATE THE TASKER ATTACHMENT FIELDS TO SET THAT THE ATTACHMENT CAME FROM CHILD AND WHICH CHILD
	if (!current.parent.nil() && current.state == 3){
		var cTaskerAttachmentFunctions = new TaskerAttachmentFunctions();
		// query attachment properties to see if any attachments are marked to be pushed to parent
		var grTaskerAttachmentProperties = new GlideRecord('x_153465_discovert_tasker_attachment_properties');
		grTaskerAttachmentProperties.addQuery('tasker', current.sys_id);
		grTaskerAttachmentProperties.addQuery('publish_to_parent', true);
		grTaskerAttachmentProperties.query();
		
		var i = 0;
		// copy all records found to the parent.
		while (grTaskerAttachmentProperties.next()){
			i = i + 1;
			gs.info('Discover Tasker - Attachment Found and being copied Iteration:' + i);
			var grAttRecord = new GlideRecord('sys_attachment');
			grAttRecord.get(grTaskerAttachmentProperties.attachment_sys_id);
			// ******** 2018-04-17 RAJ Testing new approach
			//var newAttachment = cTaskerAttachmentFunctions.copySpecificAttachment('x_153465_discovert_route_task_instance', current.sys_id, 'x_153465_discovert_route_task_instance', current.parent, grAttRecord.file_name, grAttRecord.sys_id);
			var newAttachmentSys_id = cTaskerAttachmentFunctions.copySingleAttachment('x_153465_discovert_route_task_instance', current.sys_id, 'x_153465_discovert_route_task_instance', current.parent, grAttRecord.file_name, grAttRecord.sys_id);
			
			// Attachment created, update the From Child properties on the new attachment to show it was promoted from the child.
			var attachmentProperties = new GlideRecord('x_153465_discovert_tasker_attachment_properties');
			// ******** 2018-04-17 RAJ Testing new approach
			//attachmentProperties.addQuery('attachment_sys_id', newAttachment.sys_id);
			attachmentProperties.addQuery('attachment_sys_id', newAttachmentSys_id);
			attachmentProperties.query();
			if(attachmentProperties.next()){
				// attachment found in the properties table, update it
				attachmentProperties.from_tasker_child = current.sys_id;
				attachmentProperties.attachment_stage = grTaskerAttachmentProperties.attachment_stage; // set the stage to what the child was
				attachmentProperties.update();
				gs.debug("Tasker Attachment Properties - from_tasker_child - updated");
			}
			else {
				// Attachment not added yet, create new record
				attachmentProperties.initialize();
				// ******** 2018-04-17 RAJ Testing new approach
				//attachmentProperties.attachment_sys_id = newAttachment.sys_id;
				attachmentProperties.attachment_sys_id = newAttachmentSys_id;
				attachmentProperties.attachment_stage = grTaskerAttachmentProperties.attachment_stage; // set the stage to what the child was
				attachmentProperties.from_tasker_child = current.sys_id;
				attachmentProperties.tasker = current.parent;
				attachmentProperties.insert();
				gs.debug("Tasker Attachment Properties - promotion from child, after insert didn't fire - created from update business rule");
			}
		}
	}
	
})(current, previous);]]></script>
        <sys_class_name>sys_script</sys_class_name>
        <sys_created_by>rjoy</sys_created_by>
        <sys_created_on>2018-03-16 05:07:04</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>2bb4563edbf857003a8d6be3ca961918</sys_id>
        <sys_mod_count>26</sys_mod_count>
        <sys_name>Tasker - On Cancel or Close</sys_name>
        <sys_overrides/>
        <sys_package display_value="Tasker" source="x_153465_discovert">c6b1162d4fc10300303dc3818110c7b1</sys_package>
        <sys_policy>protected</sys_policy>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Tasker">c6b1162d4fc10300303dc3818110c7b1</sys_scope>
        <sys_update_name>sys_script_2bb4563edbf857003a8d6be3ca961918</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2018-05-18 06:04:59</sys_updated_on>
        <template/>
        <when>after</when>
    </sys_script>
    <sys_translated_text action="delete_multiple" query="documentkey=2bb4563edbf857003a8d6be3ca961918"/>
</record_update>
